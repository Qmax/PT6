C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TASK3
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\TASK3.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\TASK
                    -3.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\TASK3.lst) CD DB NOIP OT(2,SIZE) INCDIR(.,.\Generated
                    -_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\TASK3.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright QMAX, 2012
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF QMAX.
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "TASK1.h"
  14          #include "TASK2.h"
  15          #include "TASK3.h"
  16          
  17          unsigned char k_val1,embd_prb_int_config;
  18          uint8 count;
  19          int t;
  20          
  21          CY_ISR_PROTO(key_interrupt);                                            //      prototype for reloacted keypad isr Interrupt
  22          
  23          void task3 (void) _task_ 3
  24          {
  25   1              k_isr_ClearPending();                                                   //      clear any pending Interrupt
  26   1              k_isr_StartEx(key_interrupt);                                   //      Change the Interrupt Address to custom ISR routine
  27   1                      
  28   1              while (1)
  29   1              {
  30   2                      os_wait1(K_SIG);                                                        //      Wait for signal from k_isr Interrupt routine
  31   2              
  32   2          /*    if(CyPins_ReadPin(K2_SENSE_P4_1))
  33   2                  k_port = k_port | 0x80;
  34   2              else 
  35   2                  k_port = k_port & 0x7F;
  36   2              
  37   2              if(CyPins_ReadPin(Key2_0_P4_0))
  38   2                  k_port = k_port | 0x40;
  39   2              else 
  40   2                  k_port = k_port & 0xBF;        
  41   2              
  42   2              if(CyPins_ReadPin(Key2_1_P12_3))
  43   2                  k_port = k_port | 0x20;        
  44   2              else 
  45   2                  k_port = k_port & 0xDF;        
  46   2              
  47   2              if(CyPins_ReadPin(Key2_2_P12_2))
  48   2                  k_port = k_port | 0x10;        
  49   2              else 
  50   2                  k_port = k_port & 0xEF;        
  51   2              
  52   2              if(CyPins_ReadPin(K1_SENSE_P0_3))
  53   2                  k_port = k_port | 0x8;
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 2   

  54   2              else 
  55   2                  k_port = k_port & 0xF7;
  56   2              
  57   2              if(CyPins_ReadPin(Key1_0_P0_2))
  58   2                  k_port = k_port | 0x4;
  59   2              else 
  60   2                  k_port = k_port & 0xFB;
  61   2              
  62   2              if(CyPins_ReadPin(Key1_1_P0_1))
  63   2                  k_port = k_port | 0x2;
  64   2              else 
  65   2                  k_port = k_port & 0xFD;
  66   2              
  67   2              if(CyPins_ReadPin(Key1_2_P0_0))
  68   2                  k_port = k_port | 0x1;
  69   2              else 
  70   2                  k_port = k_port & 0xFE;        
  71   2              
  72   2                      //k_port = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);                   //      store the key Value from PORT 0 to k_port
  73   2                      k_port = k_port ^ 0x88;                                                         //      Return key value
  74   2                      
  75   2                      do      {                                                                                               //      Key Debounce Logic: Interrupt disabled &
  76   2                  if(CyPins_ReadPin(K2_SENSE_P4_1))
  77   2                      k_val1 = k_port | 0x80;
  78   2                  else 
  79   2                      k_val1 = k_port & 0x7F;
  80   2                  
  81   2                  if(CyPins_ReadPin(Key2_0_P4_0))
  82   2                      k_val1 = k_port | 0x40;
  83   2                  else 
  84   2                      k_val1 = k_port & 0xBF;        
  85   2                  
  86   2                  if(CyPins_ReadPin(Key2_1_P12_3))
  87   2                      k_val1 = k_port | 0x20;        
  88   2                  else 
  89   2                      k_val1 = k_port & 0xDF;        
  90   2                  
  91   2                  if(CyPins_ReadPin(Key2_2_P12_2))
  92   2                      k_val1 = k_port | 0x10;        
  93   2                  else 
  94   2                      k_val1 = k_port & 0xEF;        
  95   2                  
  96   2                  if(CyPins_ReadPin(K1_SENSE_P0_3))
  97   2                      k_val1 = k_port | 0x8;
  98   2                  else 
  99   2                      k_val1 = k_port & 0xF7;
 100   2                  
 101   2                  if(CyPins_ReadPin(Key1_0_P0_2))
 102   2                      k_val1 = k_port | 0x4;
 103   2                  else 
 104   2                      k_val1 = k_port & 0xFB;
 105   2                  
 106   2                  if(CyPins_ReadPin(Key1_1_P0_1))
 107   2                      k_val1 = k_port | 0x2;
 108   2                  else 
 109   2                      k_val1 = k_port & 0xFD;
 110   2                  
 111   2                  if(CyPins_ReadPin(Key1_2_P0_0))
 112   2                      k_val1 = k_port | 0x1;
 113   2                  else 
 114   2                      k_val1 = k_port & 0xFE;        
 115   2                                      //k_val1 = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);   //      key press on hold untill key is released
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 3   

 116   2                                      k_val1 = k_val1 & 0x77;                                         //      this line was included inside the loop on [29/11/2012]
 117   2                      }       while(k_val1);                                                          //      This does not interrupt the UART Process
 118   2                      
 119   2                      k_val =  k_port;                                                                        //      Return key vale
 120   2                      CyIntEnable (24);                                                       //      Enable k_isr Interrupt
 121   2                      //if(embd_prb_int_config == 0x00)                               //      Select PSoC_Int0
 122   2                      //{
 123   2      //                      CyPins_ClearPin(PSoC_INT0_P3_7);                //      Interrupt line to CPU(i.MX51) Set low
 124   2      //          CyDelayUs(1);
 125   2      //                      CyPins_SetPin(PSoC_INT0_P3_7);                  //      Interrupt line Set high
 126   2                      }
 127   2                      else if(embd_prb_int_config == 0x01)            //      Select PSoC_Int1
 128   2                      {
 129   2                              CyPins_ClearPin(PSoC_INT0_P3_7);                //      Interrupt line to CPU(i.MX51) Set low
 130   2                              CyPins_SetPin(PSoC_INT0_P3_7);                  //      Interrupt line Set high
 131   2      //                      CyPins_ClearPin(PSoC_INT1_P3_6);                //      Interrupt line to CPU(i.MX51) Set low
 132   2      //                      CyPins_SetPin(PSoC_INT1_P3_6);                  //      Interrupt line Set high
 133   2                      }*/
 134   2              }
 135   1      }
 136          
 137          CY_ISR(key_interrupt)                                                   //      Relocated Key Pad ISR
 138          {
 139   1              CyIntDisable (24);                                                      //      Disable k_isr Interrupt
 140   1              //k_port = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);   //      store the key Value from PORT 0 to k_port
 141   1             
 142   1          do{
 143   2              if(CyPins_ReadPin(K2_SENSE_P4_1))
 144   2                  k_port = k_port | 0x80;
 145   2              else 
 146   2                  k_port = k_port & 0x7F;
 147   2              
 148   2              if(CyPins_ReadPin(Key2_0_P4_0))
 149   2                  k_port = k_port | 0x40;
 150   2              else 
 151   2                  k_port = k_port & 0xBF;        
 152   2              
 153   2              if(CyPins_ReadPin(Key2_1_P12_3))
 154   2                  k_port = k_port | 0x20;        
 155   2              else 
 156   2                  k_port = k_port & 0xDF;        
 157   2              
 158   2              if(CyPins_ReadPin(Key2_2_P12_2))
 159   2                  k_port = k_port | 0x10;        
 160   2              else 
 161   2                  k_port = k_port & 0xEF;        
 162   2              
 163   2              if(CyPins_ReadPin(K1_SENSE_P0_3))
 164   2                  k_port = k_port | 0x8;
 165   2              else 
 166   2                  k_port = k_port & 0xF7;
 167   2              
 168   2              if(CyPins_ReadPin(Key1_0_P0_2))
 169   2                  k_port = k_port | 0x4;
 170   2              else 
 171   2                  k_port = k_port & 0xFB;
 172   2              
 173   2              if(CyPins_ReadPin(Key1_1_P0_1))
 174   2                  k_port = k_port | 0x2;
 175   2              else 
 176   2                  k_port = k_port & 0xFD;
 177   2              
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 4   

 178   2              if(CyPins_ReadPin(Key1_2_P0_0))
 179   2                  k_port = k_port | 0x1;
 180   2              else 
 181   2                  k_port = k_port & 0xFE;        
 182   2              
 183   2              k_port = k_port ^ 0x88;                                         //      Set Keysense active high '1'
 184   2              prb_sts = 0x89;
 185   2              k_val =  k_port;
 186   2          }while(!CyPins_ReadPin(KEY_INT));
 187   1              /*
 188   1              if(k_port)                                                                      //      Execute if Key probe connected
 189   1              {
 190   1                      if(k_port & 0x77)    
 191   1                      {
 192   1                              isr_send_signal(3);
 193   1                              KEY_ClearInterrupt();                           //      Enable k_isr Interrupt
 194   1                      }
 195   1                      else
 196   1                      {
 197   1                              CyIntEnable (24);                                       //      Enable k_isr Interrupt
 198   1                              KEY_ClearInterrupt();                           //      Enable k_isr Interrupt
 199   1                      }
 200   1              }
 201   1              else
 202   1              {
 203   1                      KEY_ClearInterrupt();                                   //      Enable k_isr Interrupt
 204   1                      CyIntEnable (24);                                               //      Enable k_isr Interrupt
 205   1              }*/
 206   1                              CyPins_ClearPin(PSoC_INT0_P3_7);                //      Interrupt line to CPU(i.MX51) Set low
 207   1                CyDelayUs(1);
 208   1                              CyPins_SetPin(PSoC_INT0_P3_7);                  //      Interrupt line Set high    
 209   1                  
 210   1              KEY_ClearInterrupt();                                   //      Enable k_isr Interrupt
 211   1                      CyIntEnable (24);                                               //      Enable k_isr Interrupt
 212   1      
 213   1      }
 214          
 215          void TASK_3 ()                                                                  //      INITIALISATION FUNCTION OF TASK3
 216          {
 217   1              os_create_task(3);                                                      //      CREATION OF TASK3
 218   1      }
 219          
 220          /* [] END OF FILE */
*** WARNING C316 IN LINE 220 OF .\TASK3.c: unterminated conditionals
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task3 (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 25
0000 120000      E     LCALL   k_isr_ClearPending
                                           ; SOURCE LINE # 26
0003 7E00        R     MOV     R6,#HIGH key_interrupt
0005 7F00        R     MOV     R7,#LOW key_interrupt
0007 120000      E     LCALL   _k_isr_StartEx
000A         ?C0001:
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
000A 7F01              MOV     R7,#01H
000C 120000      E     LCALL   _os_wait1
                                           ; SOURCE LINE # 134
000F 80F9              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION task3 (END)

             ; FUNCTION key_interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
002B 9044CB            MOV     DPTR,#044CBH
002E 7401              MOV     A,#01H
0030 F0                MOVX    @DPTR,A
0031         ?C0006:
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0031 905021            MOV     DPTR,#05021H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 30E410            JNB     ACC.4,?C0007
                                           ; SOURCE LINE # 144
003A 900000      E     MOV     DPTR,#k_port
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 4480              ORL     A,#080H
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 6   

0042 FF                MOV     R7,A
0043 900000      E     MOV     DPTR,#k_port
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
0048 800E              SJMP    ?C0008
004A         ?C0007:
                                           ; SOURCE LINE # 146
004A 900000      E     MOV     DPTR,#k_port
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 547F              ANL     A,#07FH
0052 FF                MOV     R7,A
0053 900000      E     MOV     DPTR,#k_port
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
0058         ?C0008:
                                           ; SOURCE LINE # 148
0058 905020            MOV     DPTR,#05020H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 30E410            JNB     ACC.4,?C0009
                                           ; SOURCE LINE # 149
0061 900000      E     MOV     DPTR,#k_port
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 4440              ORL     A,#040H
0069 FF                MOV     R7,A
006A 900000      E     MOV     DPTR,#k_port
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
006F 800E              SJMP    ?C0010
0071         ?C0009:
                                           ; SOURCE LINE # 151
0071 900000      E     MOV     DPTR,#k_port
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 54BF              ANL     A,#0BFH
0079 FF                MOV     R7,A
007A 900000      E     MOV     DPTR,#k_port
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
007F         ?C0010:
                                           ; SOURCE LINE # 153
007F 905063            MOV     DPTR,#05063H
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 30E410            JNB     ACC.4,?C0011
                                           ; SOURCE LINE # 154
0088 900000      E     MOV     DPTR,#k_port
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 4420              ORL     A,#020H
0090 FF                MOV     R7,A
0091 900000      E     MOV     DPTR,#k_port
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 7   

0096 800E              SJMP    ?C0012
0098         ?C0011:
                                           ; SOURCE LINE # 156
0098 900000      E     MOV     DPTR,#k_port
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 54DF              ANL     A,#0DFH
00A0 FF                MOV     R7,A
00A1 900000      E     MOV     DPTR,#k_port
00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
00A6         ?C0012:
                                           ; SOURCE LINE # 158
00A6 905062            MOV     DPTR,#05062H
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB EF                MOV     A,R7
00AC 30E410            JNB     ACC.4,?C0013
                                           ; SOURCE LINE # 159
00AF 900000      E     MOV     DPTR,#k_port
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 EF                MOV     A,R7
00B5 4410              ORL     A,#010H
00B7 FF                MOV     R7,A
00B8 900000      E     MOV     DPTR,#k_port
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
00BD 800E              SJMP    ?C0014
00BF         ?C0013:
                                           ; SOURCE LINE # 161
00BF 900000      E     MOV     DPTR,#k_port
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 54EF              ANL     A,#0EFH
00C7 FF                MOV     R7,A
00C8 900000      E     MOV     DPTR,#k_port
00CB EF                MOV     A,R7
00CC F0                MOVX    @DPTR,A
00CD         ?C0014:
                                           ; SOURCE LINE # 163
00CD 905003            MOV     DPTR,#05003H
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 EF                MOV     A,R7
00D3 30E410            JNB     ACC.4,?C0015
                                           ; SOURCE LINE # 164
00D6 900000      E     MOV     DPTR,#k_port
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB EF                MOV     A,R7
00DC 4408              ORL     A,#08H
00DE FF                MOV     R7,A
00DF 900000      E     MOV     DPTR,#k_port
00E2 EF                MOV     A,R7
00E3 F0                MOVX    @DPTR,A
00E4 800E              SJMP    ?C0016
00E6         ?C0015:
                                           ; SOURCE LINE # 166
00E6 900000      E     MOV     DPTR,#k_port
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 8   

00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB EF                MOV     A,R7
00EC 54F7              ANL     A,#0F7H
00EE FF                MOV     R7,A
00EF 900000      E     MOV     DPTR,#k_port
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
00F4         ?C0016:
                                           ; SOURCE LINE # 168
00F4 905002            MOV     DPTR,#05002H
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA 30E410            JNB     ACC.4,?C0017
                                           ; SOURCE LINE # 169
00FD 900000      E     MOV     DPTR,#k_port
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 EF                MOV     A,R7
0103 4404              ORL     A,#04H
0105 FF                MOV     R7,A
0106 900000      E     MOV     DPTR,#k_port
0109 EF                MOV     A,R7
010A F0                MOVX    @DPTR,A
010B 800E              SJMP    ?C0018
010D         ?C0017:
                                           ; SOURCE LINE # 171
010D 900000      E     MOV     DPTR,#k_port
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 EF                MOV     A,R7
0113 54FB              ANL     A,#0FBH
0115 FF                MOV     R7,A
0116 900000      E     MOV     DPTR,#k_port
0119 EF                MOV     A,R7
011A F0                MOVX    @DPTR,A
011B         ?C0018:
                                           ; SOURCE LINE # 173
011B 905001            MOV     DPTR,#05001H
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 EF                MOV     A,R7
0121 30E410            JNB     ACC.4,?C0019
                                           ; SOURCE LINE # 174
0124 900000      E     MOV     DPTR,#k_port
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 EF                MOV     A,R7
012A 4402              ORL     A,#02H
012C FF                MOV     R7,A
012D 900000      E     MOV     DPTR,#k_port
0130 EF                MOV     A,R7
0131 F0                MOVX    @DPTR,A
0132 800E              SJMP    ?C0020
0134         ?C0019:
                                           ; SOURCE LINE # 176
0134 900000      E     MOV     DPTR,#k_port
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 EF                MOV     A,R7
013A 54FD              ANL     A,#0FDH
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 9   

013C FF                MOV     R7,A
013D 900000      E     MOV     DPTR,#k_port
0140 EF                MOV     A,R7
0141 F0                MOVX    @DPTR,A
0142         ?C0020:
                                           ; SOURCE LINE # 178
0142 905000            MOV     DPTR,#05000H
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 EF                MOV     A,R7
0148 30E410            JNB     ACC.4,?C0021
                                           ; SOURCE LINE # 179
014B 900000      E     MOV     DPTR,#k_port
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 EF                MOV     A,R7
0151 4401              ORL     A,#01H
0153 FF                MOV     R7,A
0154 900000      E     MOV     DPTR,#k_port
0157 EF                MOV     A,R7
0158 F0                MOVX    @DPTR,A
0159 800E              SJMP    ?C0022
015B         ?C0021:
                                           ; SOURCE LINE # 181
015B 900000      E     MOV     DPTR,#k_port
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 EF                MOV     A,R7
0161 54FE              ANL     A,#0FEH
0163 FF                MOV     R7,A
0164 900000      E     MOV     DPTR,#k_port
0167 EF                MOV     A,R7
0168 F0                MOVX    @DPTR,A
0169         ?C0022:
                                           ; SOURCE LINE # 183
0169 900000      E     MOV     DPTR,#k_port
016C E0                MOVX    A,@DPTR
016D FF                MOV     R7,A
016E EF                MOV     A,R7
016F 6488              XRL     A,#088H
0171 FF                MOV     R7,A
0172 900000      E     MOV     DPTR,#k_port
0175 EF                MOV     A,R7
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0177 900000      E     MOV     DPTR,#prb_sts
017A 7489              MOV     A,#089H
017C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
017D 900000      E     MOV     DPTR,#k_port
0180 E0                MOVX    A,@DPTR
0181 FF                MOV     R7,A
0182 900000      E     MOV     DPTR,#k_val
0185 EF                MOV     A,R7
0186 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0187 90502A            MOV     DPTR,#0502AH
018A E0                MOVX    A,@DPTR
018B FF                MOV     R7,A
018C EF                MOV     A,R7
018D 5410              ANL     A,#010H
018F FF                MOV     R7,A
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 10  

0190 7E00              MOV     R6,#00H
0192 EF                MOV     A,R7
0193 4E                ORL     A,R6
0194 7003              JNZ     $ + 5H
0196 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 206
0199 90501F            MOV     DPTR,#0501FH
019C E0                MOVX    A,@DPTR
019D FF                MOV     R7,A
019E EF                MOV     A,R7
019F 54FE              ANL     A,#0FEH
01A1 FF                MOV     R7,A
01A2 EF                MOV     A,R7
01A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
01A4 7F01              MOV     R7,#01H
01A6 7E00              MOV     R6,#00H
01A8 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 208
01AB 90501F            MOV     DPTR,#0501FH
01AE E0                MOVX    A,@DPTR
01AF FF                MOV     R7,A
01B0 EF                MOV     A,R7
01B1 4401              ORL     A,#01H
01B3 FF                MOV     R7,A
01B4 EF                MOV     A,R7
01B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
01B6 120000      E     LCALL   KEY_ClearInterrupt
                                           ; SOURCE LINE # 211
01B9 9044C3            MOV     DPTR,#044C3H
01BC 7401              MOV     A,#01H
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
01BF D007              POP     AR7
01C1 D006              POP     AR6
01C3 D005              POP     AR5
01C5 D004              POP     AR4
01C7 D003              POP     AR3
01C9 D002              POP     AR2
01CB D001              POP     AR1
01CD D000              POP     AR0
01CF D0D0              POP     PSW
01D1 D000        E     POP     ?C?XPAGE1SFR
01D3 D086              POP     DPS
01D5 D084              POP     DPL1
01D7 D085              POP     DPH1
01D9 D082              POP     DPL
01DB D083              POP     DPH
01DD D0F0              POP     B
01DF D0E0              POP     ACC
01E1 32                RETI    
             ; FUNCTION key_interrupt (END)

             ; FUNCTION TASK_3 (BEGIN)
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0000 7F03              MOV     R7,#03H
0002 120000      E     LCALL   _os_create_task
                                           ; SOURCE LINE # 218
0005 22                RET     
C51 COMPILER V9.51   TASK3                                                                 06/30/2014 19:17:26 PAGE 11  

             ; FUNCTION TASK_3 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    506    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
