C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TASK2
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\TASK2.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\TASK
                    -2.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\TASK2.lst) CD DB NOIP OT(2,SIZE) INCDIR(.,.\Generated
                    -_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\TASK2.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright QMAX, 2012
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF QMAX.
   9           *
  10           * ========================================
  11          */
  12          #include "TASK1.h"
  13          #include "TASK2.h"
  14          #include "TASK3.h"
  15          
  16          unsigned char switch_cmd[8],rx_word[32],k_port,k_val,d_msb,prb_sts;
  17          
  18          void task2 (void) _task_ 2
  19          {
  20   1              unsigned char word,dat_cnt = 0,cmd_exct = 0,lst_byte=0,cmd_set,stat,status,pos = 0;
  21   1      
  22   1              for(;;)
  23   1              {
  24   2                      os_wait1(K_SIG);                                                        //      Wait for signal from UART_ISR
  25   2                      
  26   2                      word    = UART_ReadRxData();
  27   2              
  28   2                      if(dat_cnt == 0)
  29   2                      {
  30   3                              if(word == 0xFF)                                                //      Software Reset Command
  31   3                              {
  32   4                                      i=0;
  33   4                                      rx_word[i]      = word;
  34   4                                      i++;
  35   4                                      dat_cnt         = 1;
  36   4                                      status          = 2;
  37   4                                      
  38   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
  39   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  40   4                                      {
  41   5                                              ;
  42   5                                      }
  43   4                              }
  44   3                              else if(word == 0x00)                                   //      Check Busy Status
  45   3                              {
  46   4                                      UART_ClearTxBuffer();
  47   4      
  48   4                                      cmd_exct        = 0;
  49   4                                      dat_cnt         = 0;
  50   4                              }
  51   3                              else if(word == 0x01)                                   //      Embedded Probe Key
  52   3                              {
  53   4                                      
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 2   

  54   4                                      UART_PutString("*");                    //      STATUS ACKNOWLEDGEMENT to uP    //
  55   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  56   4                                      {
  57   5                                              ;
  58   5                                      }
  59   4                              
  60   4                                      UART_PutString("*");
  61   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  62   4                                      {
  63   5                                              ;
  64   5                                      }
  65   4                              
  66   4                                      UART_PutString("*");
  67   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  68   4                                      {
  69   5                                              ;
  70   5                                      }
  71   4                              
  72   4                                      UART_PutString("#");
  73   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  74   4                                      {
  75   5                                              ;
  76   5                                      }
  77   4                                      
  78   4                                      UART_WriteTxData(k_val);
  79   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  80   4                                      {
  81   5                                              ;
  82   5                                      }
  83   4                                      k_val           = 0;
  84   4                                      cmd_exct        = 0;
  85   4                                      dat_cnt         = 0;
  86   4                              }
  87   3                              else if(word == 0xF1)                                   //      VI 1 
  88   3                              {
  89   4                                      for(i=0; i<=8; i++)
  90   4                                      {
  91   5                                              rx_word[i]      = 0x00;
  92   5                                      }
  93   4                                      i=0;
  94   4                                      rx_word[i]      = word;
  95   4                                      switch_cmd[0] = rx_word[i];
  96   4                                      os_send_signal(1);
  97   4                                      
  98   4                                      cmd_exct        = 0;
  99   4                                      dat_cnt         = 0;
 100   4                                      
 101   4                              }
 102   3      
 103   3      
 104   3                              else if(word == 0xF2)                                   //      VI 2 changed to single Byte CMD on 23 NOV 2012 11:26 AM
 105   3                              {
 106   4                                      for(i=0; i<=8; i++)
 107   4                                      {
 108   5                                              rx_word[i]      = 0x00;
 109   5                                      }
 110   4                                      i=0;
 111   4                                      rx_word[i]      = word;
 112   4                                      switch_cmd[0] = rx_word[i];
 113   4                                      os_send_signal(1);
 114   4                                      
 115   4                                      cmd_exct        = 0;
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 3   

 116   4                                      dat_cnt         = 0;
 117   4                                      
 118   4                              }
 119   3                              else if(word == 0x03)                                   //      ICM Select
 120   3                              {
 121   4                                      for(i=0; i<=8; i++)
 122   4                                      {
 123   5                                              rx_word[i]      = 0x00;
 124   5                                      }
 125   4                                      i=0;
 126   4                                      rx_word[i]      = word;
 127   4                                      switch_cmd[0] = rx_word[i];
 128   4                                      os_send_signal(1);
 129   4                                      
 130   4                                      cmd_exct        = 0;
 131   4                                      dat_cnt         = 0;
 132   4                                      
 133   4                              }
 134   3                  else if(word == 0xFC)                                       //      Switch fly channel
 135   3                              {
 136   4                                      for(i=0; i<=8; i++)
 137   4                                      {
 138   5                                              rx_word[i]      = 0x00;
 139   5                                      }
 140   4                                      i=0;
 141   4                                      rx_word[i]      = word;
 142   4                                      switch_cmd[0] = rx_word[i];
 143   4                                      os_send_signal(1);
 144   4                                      
 145   4                                      cmd_exct        = 0;
 146   4                                      dat_cnt         = 0;
 147   4                                      
 148   4                              }
 149   3                              else if(word == 0x06)                                   //      Function Generator
 150   3                              {
 151   4                                      for(i=0; i<=8; i++)
 152   4                                      {
 153   5                                              rx_word[i]      = 0x00;
 154   5                                      }
 155   4                                      i=0;
 156   4                                      rx_word[i]      = word;
 157   4                                      switch_cmd[0] = rx_word[i];
 158   4                                      os_send_signal(1);
 159   4                                      
 160   4                                      cmd_exct        = 0;
 161   4                                      dat_cnt         = 0;
 162   4                                      
 163   4                              }
 164   3                              else if(word == 0x08)                                   //      CodeID Read
 165   3                              {
 166   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 167   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 168   4                                      {
 169   5                                              ;
 170   5                                      }
 171   4      
 172   4                                      UART_ClearTxBuffer();
 173   4                                      UART_WriteTxData(Code_ID);
 174   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 175   4                                      {
 176   5                                              ;
 177   5                                      }
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 4   

 178   4                                      cmd_exct        = 0;
 179   4                                      dat_cnt         = 0;
 180   4      
 181   4                              }
 182   3                              else if(word == 0xD0)                                   //      DEVICE VERSION & REVISION READ
 183   3                              {                                                                               //      CHANGE OF REV or VER TO BE MADE IN TASK1 HEADER FILE
 184   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 185   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 186   4                                      {
 187   5                                              ;
 188   5                                      }
 189   4      
 190   4                                      UART_ClearTxBuffer();
 191   4                                      UART_WriteTxData(VERSION);              //      VERSION OF THE CODE
 192   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 193   4                                      {
 194   5                                              ;
 195   5                                      }
 196   4                                      UART_WriteTxData(REVISION);             //      REVISION OF THE CODE
 197   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 198   4                                      {
 199   5                                              ;
 200   5                                      }
 201   4                                      cmd_exct        = 0;
 202   4                                      dat_cnt         = 0;
 203   4                              }
 204   3                              else if(word == 0x09)                                   //      External Mux I/F
 205   3                              {
 206   4                                      i=0;
 207   4                                      rx_word[i]      = word;
 208   4                                      i++;
 209   4                                      dat_cnt         = 2;
 210   4                                      status          = 3;
 211   4                                      
 212   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 213   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 214   4                                      {
 215   5                                              ;
 216   5                                      }
 217   4                              }
 218   3                              else if(word == 0x0A)                                   //      External Mux Detect
 219   3                              {
 220   4                                      i=0;
 221   4                                      rx_word[i]      = word;
 222   4                                      switch_cmd[0] = rx_word[i];
 223   4                                      os_send_signal(1);
 224   4                                      
 225   4                                      cmd_exct        = 0;
 226   4                                      dat_cnt         = 0;
 227   4      
 228   4                              }
 229   3                              else if(word == 0x0B)                                   //      EX-MUX TEST Chnl ON
 230   3                              {
 231   4                                      i=0;
 232   4                                      rx_word[i]      = word;
 233   4                                      i++;
 234   4                                      dat_cnt         = 1;
 235   4                                      status          = 2;
 236   4                                      
 237   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 238   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 239   4                                      {
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 5   

 240   5                                              ;
 241   5                                      }
 242   4                              }
 243   3                              else if(word == 0x0C)                                   //      EX-MUX REF Chnl ON
 244   3                              {
 245   4                                      i=0;
 246   4                                      rx_word[i]      = word;
 247   4                                      i++;
 248   4                                      dat_cnt         = 1;
 249   4                                      status          = 2;
 250   4                                      
 251   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 252   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 253   4                                      {
 254   5                                              ;
 255   5                                      }
 256   4                              }
 257   3                              else if(word == 0x10)                                   //       PWM START
 258   3                              {
 259   4                                      for(i=0; i<=8; i++)
 260   4                                      {
 261   5                                              rx_word[i]      = 0x00;
 262   5                                      }
 263   4                                      i=0;
 264   4                                      rx_word[i]      = word;
 265   4                                      switch_cmd[0] = rx_word[i];
 266   4                                      os_send_signal(1);
 267   4                                      
 268   4                                      cmd_exct        = 0;
 269   4                                      dat_cnt         = 0;
 270   4      
 271   4                              }
 272   3                              else if(word == 0x11)                                   //       PWM STOP
 273   3                              {
 274   4                                      for(i=0; i<=8; i++)
 275   4                                      {
 276   5                                              rx_word[i]      = 0x00;
 277   5                                      }
 278   4                                      i=0;
 279   4                                      rx_word[i]      = word;
 280   4                                      switch_cmd[0] = rx_word[i];
 281   4                                      os_send_signal(1);
 282   4                                      
 283   4                                      cmd_exct        = 0;
 284   4                                      dat_cnt         = 0;
 285   4      
 286   4                              }
 287   3                              else if(word == 0x18)                                   //      Embedded Probe Status
 288   3                              {
 289   4                                      
 290   4                      if(CyPins_ReadPin(K2_SENSE_P4_1))
 291   4                          prb_sts = k_port | 0x80;
 292   4                      else 
 293   4                          prb_sts = k_port & 0x7F;
 294   4                      
 295   4                      if(CyPins_ReadPin(Key2_0_P4_0))
 296   4                          prb_sts = k_port | 0x40;
 297   4                      else 
 298   4                          prb_sts = k_port & 0xBF;        
 299   4                      
 300   4                      if(CyPins_ReadPin(Key2_1_P12_3))
 301   4                          k_port = k_port | 0x20;        
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 6   

 302   4                      else 
 303   4                          k_port = k_port & 0xDF;        
 304   4                      
 305   4                      if(CyPins_ReadPin(Key2_2_P12_2))
 306   4                          prb_sts = k_port | 0x10;        
 307   4                      else 
 308   4                          prb_sts = k_port & 0xEF;        
 309   4                      
 310   4                      if(CyPins_ReadPin(K1_SENSE_P0_3))
 311   4                          prb_sts = k_port | 0x8;
 312   4                      else 
 313   4                          prb_sts = k_port & 0xF7;
 314   4                      
 315   4                      if(CyPins_ReadPin(Key1_0_P0_2))
 316   4                          prb_sts = k_port | 0x4;
 317   4                      else 
 318   4                          prb_sts = k_port & 0xFB;
 319   4                      
 320   4                      if(CyPins_ReadPin(Key1_1_P0_1))
 321   4                          prb_sts = k_port | 0x2;
 322   4                      else 
 323   4                          prb_sts = k_port & 0xFD;
 324   4                      
 325   4                      if(CyPins_ReadPin(Key1_2_P0_0))
 326   4                          prb_sts = k_port | 0x1;
 327   4                      else 
 328   4                          prb_sts = k_port & 0xFE;                        
 329   4                                      //prb_sts = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);          //Port0 Read
 330   4                                      prb_sts = ~prb_sts;                                                                     //Invert Port0 Data
 331   4                                      prb_sts = prb_sts & 0x88;                                                       //Mask the Key Pin Input from Port0 Data
 332   4                                      prb_sts = prb_sts >> 3;
 333   4                                      
 334   4                                      UART_PutString("*");                    //      STATUS ACKNOWLEDGEMENT to uP    //
 335   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 336   4                                      {
 337   5                                              ;
 338   5                                      }
 339   4                                      
 340   4                                      UART_PutString("*");
 341   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 342   4                                      {
 343   5                                              ;
 344   5                                      }
 345   4                              
 346   4                                      UART_PutString("*");
 347   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 348   4                                      {
 349   5                                              ;
 350   5                                      }
 351   4                              
 352   4                                      UART_PutString("#");
 353   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 354   4                                      {
 355   5                                              ;
 356   5                                      }
 357   4                                      
 358   4                                      UART_WriteTxData(prb_sts);
 359   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 360   4                                      {
 361   5                                              ;
 362   5                                      }
 363   4                              
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 7   

 364   4                                      cmd_exct        = 0;
 365   4                                      dat_cnt         = 0;
 366   4                              }
 367   3                              else if(word == 0x1C)                                   //      Interrupt Pin Configuration
 368   3                              {
 369   4                                      i=0;
 370   4                                      rx_word[i]      = word;
 371   4                                      i++;
 372   4                                      dat_cnt         = 1;
 373   4                                      status          = 2;
 374   4                                      
 375   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 376   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 377   4                                      {
 378   5                                              ;
 379   5                                      }
 380   4                              }
 381   3                              else if(word == 0x40)                                   //      Debug Mode
 382   3                              {
 383   4                                      for(i=0; i<=8; i++)
 384   4                                      {
 385   5                                              rx_word[i]      = 0x00;
 386   5                                      }
 387   4                                      i=0;
 388   4                                      rx_word[i]      = word;
 389   4                                      switch_cmd[0] = rx_word[i];
 390   4                                      os_send_signal(1);
 391   4                                      
 392   4                                      cmd_exct        = 0;
 393   4                                      dat_cnt         = 0;
 394   4                                      
 395   4                              }
 396   3                              else if(word == 0x45)                                   //      Port Status Read
 397   3                              {
 398   4                                      for(i=0; i<=8; i++)
 399   4                                      {
 400   5                                              rx_word[i]      = 0x00;
 401   5                                      }
 402   4                                      i = 0;
 403   4                                      rx_word[i]      = word;
 404   4                                      switch_cmd[0] = rx_word[i];
 405   4                                      os_send_signal(1);
 406   4                                      
 407   4                                      cmd_exct        = 0;
 408   4                                      dat_cnt         = 0;
 409   4                                      
 410   4                              }
 411   3                              else if(word == 0x46){                                  //      SRC IMP Status Read
 412   4                                      for(i=0; i<=8; i++)
 413   4                                      {
 414   5                                              rx_word[i]      = 0x00;
 415   5                                      }
 416   4                                      i = 0;
 417   4                                      rx_word[i]      = word;
 418   4                                      switch_cmd[0] = rx_word[i];
 419   4                                      os_send_signal(1);
 420   4                      
 421   4                                      cmd_exct        = 0;
 422   4                                      dat_cnt         = 0;
 423   4                                      
 424   4                              }                       
 425   3                              else if(word == 0x47)                                   //      SRC IMP ENABLE
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 8   

 426   3                              {
 427   4                                      for(i=0; i<=8; i++)
 428   4                                      {
 429   5                                              rx_word[i]      = 0x00;
 430   5                                      }
 431   4                                      i=0;
 432   4                                      rx_word[i]      = word;
 433   4                                      switch_cmd[0] = rx_word[i];
 434   4                                      os_send_signal(1);
 435   4                                      
 436   4                                      cmd_exct        = 0;
 437   4                                      dat_cnt         = 0;
 438   4                                      
 439   4                              }            
 440   3                              else if(word == 0x48)                                   //      SRC IMP DISABLE
 441   3                              {
 442   4                                      for(i=0; i<=8; i++)
 443   4                                      {
 444   5                                              rx_word[i]      = 0x00;
 445   5                                      }
 446   4                                      i=0;
 447   4                                      rx_word[i]      = word;
 448   4                                      switch_cmd[0] = rx_word[i];
 449   4                                      os_send_signal(1);
 450   4                                      
 451   4                                      cmd_exct        = 0;
 452   4                                      dat_cnt         = 0;
 453   4                                      
 454   4                              }                        
 455   3                              else if(word == 0x50)                                   //      BAUD RATE CHANGE
 456   3                              {
 457   4                                      i=0;
 458   4                                      rx_word[i]      = word;
 459   4                                      i++;
 460   4                                      dat_cnt         = 1;
 461   4                                      status          = 2;
 462   4                                      
 463   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 464   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 465   4                                      {
 466   5                                              ;
 467   5                                      }
 468   4                              }
 469   3                  else if(word == 0x51)                                       //      SRC IMP SELECTION
 470   3                              {
 471   4                                      i=0;
 472   4                                      rx_word[i]      = word;
 473   4                                      i++;
 474   4                                      dat_cnt         = 1;
 475   4                                      status          = 2;
 476   4                                      
 477   4                                      UART_ClearRxBuffer();
 478   4                      UART_ClearTxBuffer();                
 479   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 480   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 481   4                      {
 482   5                          ;
 483   5                      }
 484   4                      UART_ClearTxBuffer();                
 485   4                              }                       
 486   3                              else if(word == 0x55)                                   //      Loop Check
 487   3                              {
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 9   

 488   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 489   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 490   4                                      {
 491   5                                              ;
 492   5                                      }
 493   4                                      
 494   4                                      UART_ClearTxBuffer();
 495   4                                      UART_WriteTxData(word);
 496   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 497   4                                      {
 498   5                                              ;
 499   5                                      }
 500   4                                      cmd_exct        = 0;
 501   4                                      dat_cnt         = 0;
 502   4                              }
 503   3                              else if(word == 0x0D)                                   //      Print Stored Values
 504   3                              {
 505   4                                      cmd_exct        = 0;
 506   4                                      dat_cnt         = 0;
 507   4                                      prnt_en         = 1;
 508   4                                      
 509   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 510   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 511   4                                      {
 512   5                                              ;
 513   5                                      }
 514   4                                      
 515   4                                      os_send_signal(1);                                      //      Send signal to TASK1 for execution
 516   4                              }
 517   3                              else if(word == 0xDE)                                   //      PROGRAMMABLE DELAY
 518   3                              {
 519   4                                      for(i=0; i<=8; i++)
 520   4                                      {
 521   5                                              rx_word[i]      = 0x00;
 522   5                                      }
 523   4                                      i=0;
 524   4                                      rx_word[i]      = word;
 525   4                                      i++;
 526   4                                      dat_cnt         = 2;
 527   4                                      status          = 3;
 528   4                                      
 529   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 530   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 531   4                                      {
 532   5                                              ;
 533   5                                      }
 534   4                              }
 535   3                              else if(word == 0xDD)                                   //      PROGRAMABLE DELAY VALUE READ BACK
 536   3                              {
 537   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 538   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 539   4                                      {
 540   5                                              ;
 541   5                                      }
 542   4                                      
 543   4                                      d_msb = delay >> 8;
 544   4                                      
 545   4                                      UART_ClearTxBuffer();
 546   4                                      UART_WriteTxData(d_msb);
 547   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 548   4                                      {
 549   5                                              ;
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 10  

 550   5                                      }
 551   4      
 552   4                                      UART_WriteTxData(delay);
 553   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 554   4                                      {
 555   5                                              ;
 556   5                                      }
 557   4                                      
 558   4                                      cmd_exct        = 0;
 559   4                                      dat_cnt         = 0;
 560   4                              }
 561   3                              else
 562   3                              {
 563   4                                      for(i = 0; i <= 31; i++)
 564   4                                      {
 565   5                                              rx_word[i]      = 0x00;
 566   5                                      }
 567   4                                      dat_cnt         = 0;
 568   4                                      cmd_exct        = 0;
 569   4                                      
 570   4                                      UART_PutString("***?");
 571   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 572   4                                      {
 573   5                                              ;
 574   5                                      }
 575   4                              }
 576   3                      }
 577   2                      else if(dat_cnt)
 578   2                      {
 579   3                              rx_word[i]      = word;
 580   3                              i++;
 581   3                              dat_cnt--;
 582   3                              if(dat_cnt == 0)
 583   3                              {
 584   4                                      cmd_exct = 1;
 585   4                                      if(rx_word[0] == 0xDE)
 586   4                                      {
 587   5                                              delay = 0;
 588   5                                              delay = delay + rx_word[1];
 589   5                                              delay = delay << 8;
 590   5                                              delay = delay + rx_word[2];
 591   5                                      }
 592   4                              }
 593   3                              else
 594   3                              {
 595   4                                      cmd_exct = 0;
 596   4                              }
 597   3                      }
 598   2                      if(cmd_exct == 1)
 599   2                      {
 600   3                              lst_byte = --i;
 601   3                              cmd_set = status-1;
 602   3                                      
 603   3                              for(stat = status; stat > 0; stat--)
 604   3                              {
 605   4                                      switch_cmd[cmd_set] = rx_word[lst_byte];
 606   4                                      lst_byte--;cmd_set--;
 607   4                              }
 608   3                              
 609   3                              cmd_exct = 0;
 610   3                              os_send_signal(1);                                              //      Send signal to TASK1 for execution
 611   3                              ++i;
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 11  

 612   3                      }
 613   2              }
 614   1      }
 615          
 616          void TASK_2 ()                                                                          //      INITIALISATION FUNCTION OF TASK2
 617          {
 618   1              os_create_task(2);                                                              //      CREATION OF TASK2
 619   1      }
 620          
 621          /* [] END OF FILE */
*** WARNING C316 IN LINE 621 OF .\TASK2.c: unterminated conditionals
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 20
0000 900000      R     MOV     DPTR,#dat_cnt
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#cmd_exct
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#lst_byte
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
000F 900000      R     MOV     DPTR,#pos
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0014         ?C0001:
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _os_wait1
                                           ; SOURCE LINE # 26
0019 120000      E     LCALL   UART_ReadRxData
001C 900000      R     MOV     DPTR,#word
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
0021 900000      R     MOV     DPTR,#dat_cnt
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 6003              JZ      $ + 5H
0029 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
002C 900000      R     MOV     DPTR,#word
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 64FF              XRL     A,#0FFH
0034 7045              JNZ     ?C0004
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
0036 900000      E     MOV     DPTR,#i
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
003B 900000      R     MOV     DPTR,#word
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      E     MOV     DPTR,#i
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 7400        R     MOV     A,#LOW rx_word
0047 2E                ADD     A,R6
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH rx_word
004D F583              MOV     DPH,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 13  

004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0051 900000      E     MOV     DPTR,#i
0054 E0                MOVX    A,@DPTR
0055 04                INC     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
0057 900000      R     MOV     DPTR,#dat_cnt
005A 7401              MOV     A,#01H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
005D 900000      R     MOV     DPTR,#status
0060 7402              MOV     A,#02H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0063 7BFF              MOV     R3,#0FFH
0065 7A00        R     MOV     R2,#HIGH ?SC_0
0067 7900        R     MOV     R1,#LOW ?SC_0
0069 120000      E     LCALL   _UART_PutString
006C         ?C0005:
                                           ; SOURCE LINE # 39
006C 120000      E     LCALL   UART_ReadTxStatus
006F EF                MOV     A,R7
0070 30E103            JNB     ACC.1,$ + 6H
0073 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 42
0076 80F4              SJMP    ?C0005
0078         ?C0006:
                                           ; SOURCE LINE # 43
0078 020000      R     LJMP    ?C0180
007B         ?C0004:
                                           ; SOURCE LINE # 44
007B 900000      R     MOV     DPTR,#word
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 7010              JNZ     ?C0008
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0083 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 48
0086 900000      R     MOV     DPTR,#cmd_exct
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
008B 900000      R     MOV     DPTR,#dat_cnt
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0090 020000      R     LJMP    ?C0180
0093         ?C0008:
                                           ; SOURCE LINE # 51
0093 900000      R     MOV     DPTR,#word
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 6401              XRL     A,#01H
009B 7061              JNZ     ?C0010
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 54
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 14  

009D 7BFF              MOV     R3,#0FFH
009F 7A00        R     MOV     R2,#HIGH ?SC_5
00A1 7900        R     MOV     R1,#LOW ?SC_5
00A3 120000      E     LCALL   _UART_PutString
00A6         ?C0011:
                                           ; SOURCE LINE # 55
00A6 120000      E     LCALL   UART_ReadTxStatus
00A9 EF                MOV     A,R7
00AA 30E1F9            JNB     ACC.1,?C0011
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
00AD         ?C0012:
                                           ; SOURCE LINE # 60
00AD 7BFF              MOV     R3,#0FFH
00AF 7A00        R     MOV     R2,#HIGH ?SC_5
00B1 7900        R     MOV     R1,#LOW ?SC_5
00B3 120000      E     LCALL   _UART_PutString
00B6         ?C0013:
                                           ; SOURCE LINE # 61
00B6 120000      E     LCALL   UART_ReadTxStatus
00B9 EF                MOV     A,R7
00BA 30E1F9            JNB     ACC.1,?C0013
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 64
00BD         ?C0014:
                                           ; SOURCE LINE # 66
00BD 7BFF              MOV     R3,#0FFH
00BF 7A00        R     MOV     R2,#HIGH ?SC_5
00C1 7900        R     MOV     R1,#LOW ?SC_5
00C3 120000      E     LCALL   _UART_PutString
00C6         ?C0015:
                                           ; SOURCE LINE # 67
00C6 120000      E     LCALL   UART_ReadTxStatus
00C9 EF                MOV     A,R7
00CA 30E1F9            JNB     ACC.1,?C0015
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 70
00CD         ?C0016:
                                           ; SOURCE LINE # 72
00CD 7BFF              MOV     R3,#0FFH
00CF 7A00        R     MOV     R2,#HIGH ?SC_7
00D1 7900        R     MOV     R1,#LOW ?SC_7
00D3 120000      E     LCALL   _UART_PutString
00D6         ?C0017:
                                           ; SOURCE LINE # 73
00D6 120000      E     LCALL   UART_ReadTxStatus
00D9 EF                MOV     A,R7
00DA 30E1F9            JNB     ACC.1,?C0017
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 76
00DD         ?C0018:
                                           ; SOURCE LINE # 78
00DD 900000      R     MOV     DPTR,#k_val
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 120000      E     LCALL   _UART_WriteTxData
00E5         ?C0019:
                                           ; SOURCE LINE # 79
00E5 120000      E     LCALL   UART_ReadTxStatus
00E8 EF                MOV     A,R7
00E9 30E1F9            JNB     ACC.1,?C0019
                                           ; SOURCE LINE # 80
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 15  

                                           ; SOURCE LINE # 82
00EC         ?C0020:
                                           ; SOURCE LINE # 83
00EC 900000      R     MOV     DPTR,#k_val
00EF E4                CLR     A
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
00F1 900000      R     MOV     DPTR,#cmd_exct
00F4 E4                CLR     A
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
00F6 900000      R     MOV     DPTR,#dat_cnt
00F9 E4                CLR     A
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
00FB 020000      R     LJMP    ?C0180
00FE         ?C0010:
                                           ; SOURCE LINE # 87
00FE 900000      R     MOV     DPTR,#word
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 EF                MOV     A,R7
0104 64F1              XRL     A,#0F1H
0106 706C              JNZ     ?C0022
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0108 900000      E     MOV     DPTR,#i
010B E4                CLR     A
010C F0                MOVX    @DPTR,A
010D         ?C0023:
010D 900000      E     MOV     DPTR,#i
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 EF                MOV     A,R7
0113 D3                SETB    C
0114 9408              SUBB    A,#08H
0116 5019              JNC     ?C0024
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0118 900000      E     MOV     DPTR,#i
011B E0                MOVX    A,@DPTR
011C FF                MOV     R7,A
011D 7400        R     MOV     A,#LOW rx_word
011F 2F                ADD     A,R7
0120 F582              MOV     DPL,A
0122 E4                CLR     A
0123 3400        R     ADDC    A,#HIGH rx_word
0125 F583              MOV     DPH,A
0127 E4                CLR     A
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0129 900000      E     MOV     DPTR,#i
012C E0                MOVX    A,@DPTR
012D 04                INC     A
012E F0                MOVX    @DPTR,A
012F 80DC              SJMP    ?C0023
0131         ?C0024:
                                           ; SOURCE LINE # 93
0131 900000      E     MOV     DPTR,#i
0134 E4                CLR     A
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 16  

0136 900000      R     MOV     DPTR,#word
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B 900000      E     MOV     DPTR,#i
013E E0                MOVX    A,@DPTR
013F FE                MOV     R6,A
0140 7400        R     MOV     A,#LOW rx_word
0142 2E                ADD     A,R6
0143 F582              MOV     DPL,A
0145 E4                CLR     A
0146 3400        R     ADDC    A,#HIGH rx_word
0148 F583              MOV     DPH,A
014A EF                MOV     A,R7
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
014C 900000      E     MOV     DPTR,#i
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 7400        R     MOV     A,#LOW rx_word
0153 2F                ADD     A,R7
0154 F582              MOV     DPL,A
0156 E4                CLR     A
0157 3400        R     ADDC    A,#HIGH rx_word
0159 F583              MOV     DPH,A
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D 900000      R     MOV     DPTR,#switch_cmd
0160 EF                MOV     A,R7
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0162 7F01              MOV     R7,#01H
0164 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 98
0167 900000      R     MOV     DPTR,#cmd_exct
016A E4                CLR     A
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
016C 900000      R     MOV     DPTR,#dat_cnt
016F E4                CLR     A
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0171 020000      R     LJMP    ?C0180
0174         ?C0022:
                                           ; SOURCE LINE # 104
0174 900000      R     MOV     DPTR,#word
0177 E0                MOVX    A,@DPTR
0178 FF                MOV     R7,A
0179 EF                MOV     A,R7
017A 64F2              XRL     A,#0F2H
017C 706C              JNZ     ?C0027
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
017E 900000      E     MOV     DPTR,#i
0181 E4                CLR     A
0182 F0                MOVX    @DPTR,A
0183         ?C0028:
0183 900000      E     MOV     DPTR,#i
0186 E0                MOVX    A,@DPTR
0187 FF                MOV     R7,A
0188 EF                MOV     A,R7
0189 D3                SETB    C
018A 9408              SUBB    A,#08H
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 17  

018C 5019              JNC     ?C0029
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
018E 900000      E     MOV     DPTR,#i
0191 E0                MOVX    A,@DPTR
0192 FF                MOV     R7,A
0193 7400        R     MOV     A,#LOW rx_word
0195 2F                ADD     A,R7
0196 F582              MOV     DPL,A
0198 E4                CLR     A
0199 3400        R     ADDC    A,#HIGH rx_word
019B F583              MOV     DPH,A
019D E4                CLR     A
019E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
019F 900000      E     MOV     DPTR,#i
01A2 E0                MOVX    A,@DPTR
01A3 04                INC     A
01A4 F0                MOVX    @DPTR,A
01A5 80DC              SJMP    ?C0028
01A7         ?C0029:
                                           ; SOURCE LINE # 110
01A7 900000      E     MOV     DPTR,#i
01AA E4                CLR     A
01AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
01AC 900000      R     MOV     DPTR,#word
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 900000      E     MOV     DPTR,#i
01B4 E0                MOVX    A,@DPTR
01B5 FE                MOV     R6,A
01B6 7400        R     MOV     A,#LOW rx_word
01B8 2E                ADD     A,R6
01B9 F582              MOV     DPL,A
01BB E4                CLR     A
01BC 3400        R     ADDC    A,#HIGH rx_word
01BE F583              MOV     DPH,A
01C0 EF                MOV     A,R7
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
01C2 900000      E     MOV     DPTR,#i
01C5 E0                MOVX    A,@DPTR
01C6 FF                MOV     R7,A
01C7 7400        R     MOV     A,#LOW rx_word
01C9 2F                ADD     A,R7
01CA F582              MOV     DPL,A
01CC E4                CLR     A
01CD 3400        R     ADDC    A,#HIGH rx_word
01CF F583              MOV     DPH,A
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 900000      R     MOV     DPTR,#switch_cmd
01D6 EF                MOV     A,R7
01D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
01D8 7F01              MOV     R7,#01H
01DA 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 115
01DD 900000      R     MOV     DPTR,#cmd_exct
01E0 E4                CLR     A
01E1 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 18  

                                           ; SOURCE LINE # 116
01E2 900000      R     MOV     DPTR,#dat_cnt
01E5 E4                CLR     A
01E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
01E7 020000      R     LJMP    ?C0180
01EA         ?C0027:
                                           ; SOURCE LINE # 119
01EA 900000      R     MOV     DPTR,#word
01ED E0                MOVX    A,@DPTR
01EE FF                MOV     R7,A
01EF EF                MOV     A,R7
01F0 6403              XRL     A,#03H
01F2 706C              JNZ     ?C0032
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
01F4 900000      E     MOV     DPTR,#i
01F7 E4                CLR     A
01F8 F0                MOVX    @DPTR,A
01F9         ?C0033:
01F9 900000      E     MOV     DPTR,#i
01FC E0                MOVX    A,@DPTR
01FD FF                MOV     R7,A
01FE EF                MOV     A,R7
01FF D3                SETB    C
0200 9408              SUBB    A,#08H
0202 5019              JNC     ?C0034
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0204 900000      E     MOV     DPTR,#i
0207 E0                MOVX    A,@DPTR
0208 FF                MOV     R7,A
0209 7400        R     MOV     A,#LOW rx_word
020B 2F                ADD     A,R7
020C F582              MOV     DPL,A
020E E4                CLR     A
020F 3400        R     ADDC    A,#HIGH rx_word
0211 F583              MOV     DPH,A
0213 E4                CLR     A
0214 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0215 900000      E     MOV     DPTR,#i
0218 E0                MOVX    A,@DPTR
0219 04                INC     A
021A F0                MOVX    @DPTR,A
021B 80DC              SJMP    ?C0033
021D         ?C0034:
                                           ; SOURCE LINE # 125
021D 900000      E     MOV     DPTR,#i
0220 E4                CLR     A
0221 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0222 900000      R     MOV     DPTR,#word
0225 E0                MOVX    A,@DPTR
0226 FF                MOV     R7,A
0227 900000      E     MOV     DPTR,#i
022A E0                MOVX    A,@DPTR
022B FE                MOV     R6,A
022C 7400        R     MOV     A,#LOW rx_word
022E 2E                ADD     A,R6
022F F582              MOV     DPL,A
0231 E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 19  

0232 3400        R     ADDC    A,#HIGH rx_word
0234 F583              MOV     DPH,A
0236 EF                MOV     A,R7
0237 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0238 900000      E     MOV     DPTR,#i
023B E0                MOVX    A,@DPTR
023C FF                MOV     R7,A
023D 7400        R     MOV     A,#LOW rx_word
023F 2F                ADD     A,R7
0240 F582              MOV     DPL,A
0242 E4                CLR     A
0243 3400        R     ADDC    A,#HIGH rx_word
0245 F583              MOV     DPH,A
0247 E0                MOVX    A,@DPTR
0248 FF                MOV     R7,A
0249 900000      R     MOV     DPTR,#switch_cmd
024C EF                MOV     A,R7
024D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
024E 7F01              MOV     R7,#01H
0250 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 130
0253 900000      R     MOV     DPTR,#cmd_exct
0256 E4                CLR     A
0257 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0258 900000      R     MOV     DPTR,#dat_cnt
025B E4                CLR     A
025C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
025D 020000      R     LJMP    ?C0180
0260         ?C0032:
                                           ; SOURCE LINE # 134
0260 900000      R     MOV     DPTR,#word
0263 E0                MOVX    A,@DPTR
0264 FF                MOV     R7,A
0265 EF                MOV     A,R7
0266 64FC              XRL     A,#0FCH
0268 706C              JNZ     ?C0037
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
026A 900000      E     MOV     DPTR,#i
026D E4                CLR     A
026E F0                MOVX    @DPTR,A
026F         ?C0038:
026F 900000      E     MOV     DPTR,#i
0272 E0                MOVX    A,@DPTR
0273 FF                MOV     R7,A
0274 EF                MOV     A,R7
0275 D3                SETB    C
0276 9408              SUBB    A,#08H
0278 5019              JNC     ?C0039
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
027A 900000      E     MOV     DPTR,#i
027D E0                MOVX    A,@DPTR
027E FF                MOV     R7,A
027F 7400        R     MOV     A,#LOW rx_word
0281 2F                ADD     A,R7
0282 F582              MOV     DPL,A
0284 E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 20  

0285 3400        R     ADDC    A,#HIGH rx_word
0287 F583              MOV     DPH,A
0289 E4                CLR     A
028A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
028B 900000      E     MOV     DPTR,#i
028E E0                MOVX    A,@DPTR
028F 04                INC     A
0290 F0                MOVX    @DPTR,A
0291 80DC              SJMP    ?C0038
0293         ?C0039:
                                           ; SOURCE LINE # 140
0293 900000      E     MOV     DPTR,#i
0296 E4                CLR     A
0297 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0298 900000      R     MOV     DPTR,#word
029B E0                MOVX    A,@DPTR
029C FF                MOV     R7,A
029D 900000      E     MOV     DPTR,#i
02A0 E0                MOVX    A,@DPTR
02A1 FE                MOV     R6,A
02A2 7400        R     MOV     A,#LOW rx_word
02A4 2E                ADD     A,R6
02A5 F582              MOV     DPL,A
02A7 E4                CLR     A
02A8 3400        R     ADDC    A,#HIGH rx_word
02AA F583              MOV     DPH,A
02AC EF                MOV     A,R7
02AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
02AE 900000      E     MOV     DPTR,#i
02B1 E0                MOVX    A,@DPTR
02B2 FF                MOV     R7,A
02B3 7400        R     MOV     A,#LOW rx_word
02B5 2F                ADD     A,R7
02B6 F582              MOV     DPL,A
02B8 E4                CLR     A
02B9 3400        R     ADDC    A,#HIGH rx_word
02BB F583              MOV     DPH,A
02BD E0                MOVX    A,@DPTR
02BE FF                MOV     R7,A
02BF 900000      R     MOV     DPTR,#switch_cmd
02C2 EF                MOV     A,R7
02C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
02C4 7F01              MOV     R7,#01H
02C6 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 145
02C9 900000      R     MOV     DPTR,#cmd_exct
02CC E4                CLR     A
02CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
02CE 900000      R     MOV     DPTR,#dat_cnt
02D1 E4                CLR     A
02D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
02D3 020000      R     LJMP    ?C0180
02D6         ?C0037:
                                           ; SOURCE LINE # 149
02D6 900000      R     MOV     DPTR,#word
02D9 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 21  

02DA FF                MOV     R7,A
02DB EF                MOV     A,R7
02DC 6406              XRL     A,#06H
02DE 706C              JNZ     ?C0042
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
02E0 900000      E     MOV     DPTR,#i
02E3 E4                CLR     A
02E4 F0                MOVX    @DPTR,A
02E5         ?C0043:
02E5 900000      E     MOV     DPTR,#i
02E8 E0                MOVX    A,@DPTR
02E9 FF                MOV     R7,A
02EA EF                MOV     A,R7
02EB D3                SETB    C
02EC 9408              SUBB    A,#08H
02EE 5019              JNC     ?C0044
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
02F0 900000      E     MOV     DPTR,#i
02F3 E0                MOVX    A,@DPTR
02F4 FF                MOV     R7,A
02F5 7400        R     MOV     A,#LOW rx_word
02F7 2F                ADD     A,R7
02F8 F582              MOV     DPL,A
02FA E4                CLR     A
02FB 3400        R     ADDC    A,#HIGH rx_word
02FD F583              MOV     DPH,A
02FF E4                CLR     A
0300 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0301 900000      E     MOV     DPTR,#i
0304 E0                MOVX    A,@DPTR
0305 04                INC     A
0306 F0                MOVX    @DPTR,A
0307 80DC              SJMP    ?C0043
0309         ?C0044:
                                           ; SOURCE LINE # 155
0309 900000      E     MOV     DPTR,#i
030C E4                CLR     A
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
030E 900000      R     MOV     DPTR,#word
0311 E0                MOVX    A,@DPTR
0312 FF                MOV     R7,A
0313 900000      E     MOV     DPTR,#i
0316 E0                MOVX    A,@DPTR
0317 FE                MOV     R6,A
0318 7400        R     MOV     A,#LOW rx_word
031A 2E                ADD     A,R6
031B F582              MOV     DPL,A
031D E4                CLR     A
031E 3400        R     ADDC    A,#HIGH rx_word
0320 F583              MOV     DPH,A
0322 EF                MOV     A,R7
0323 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0324 900000      E     MOV     DPTR,#i
0327 E0                MOVX    A,@DPTR
0328 FF                MOV     R7,A
0329 7400        R     MOV     A,#LOW rx_word
032B 2F                ADD     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 22  

032C F582              MOV     DPL,A
032E E4                CLR     A
032F 3400        R     ADDC    A,#HIGH rx_word
0331 F583              MOV     DPH,A
0333 E0                MOVX    A,@DPTR
0334 FF                MOV     R7,A
0335 900000      R     MOV     DPTR,#switch_cmd
0338 EF                MOV     A,R7
0339 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
033A 7F01              MOV     R7,#01H
033C 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 160
033F 900000      R     MOV     DPTR,#cmd_exct
0342 E4                CLR     A
0343 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0344 900000      R     MOV     DPTR,#dat_cnt
0347 E4                CLR     A
0348 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0349 020000      R     LJMP    ?C0180
034C         ?C0042:
                                           ; SOURCE LINE # 164
034C 900000      R     MOV     DPTR,#word
034F E0                MOVX    A,@DPTR
0350 FF                MOV     R7,A
0351 EF                MOV     A,R7
0352 6408              XRL     A,#08H
0354 702C              JNZ     ?C0047
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0356 7BFF              MOV     R3,#0FFH
0358 7A00        R     MOV     R2,#HIGH ?SC_0
035A 7900        R     MOV     R1,#LOW ?SC_0
035C 120000      E     LCALL   _UART_PutString
035F         ?C0048:
                                           ; SOURCE LINE # 167
035F 120000      E     LCALL   UART_ReadTxStatus
0362 EF                MOV     A,R7
0363 30E1F9            JNB     ACC.1,?C0048
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
0366         ?C0049:
                                           ; SOURCE LINE # 172
0366 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 173
0369 7F27              MOV     R7,#027H
036B 120000      E     LCALL   _UART_WriteTxData
036E         ?C0050:
                                           ; SOURCE LINE # 174
036E 120000      E     LCALL   UART_ReadTxStatus
0371 EF                MOV     A,R7
0372 30E1F9            JNB     ACC.1,?C0050
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 177
0375         ?C0051:
                                           ; SOURCE LINE # 178
0375 900000      R     MOV     DPTR,#cmd_exct
0378 E4                CLR     A
0379 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 23  

037A 900000      R     MOV     DPTR,#dat_cnt
037D E4                CLR     A
037E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
037F 020000      R     LJMP    ?C0180
0382         ?C0047:
                                           ; SOURCE LINE # 182
0382 900000      R     MOV     DPTR,#word
0385 E0                MOVX    A,@DPTR
0386 FF                MOV     R7,A
0387 EF                MOV     A,R7
0388 64D0              XRL     A,#0D0H
038A 7038              JNZ     ?C0053
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
038C 7BFF              MOV     R3,#0FFH
038E 7A00        R     MOV     R2,#HIGH ?SC_0
0390 7900        R     MOV     R1,#LOW ?SC_0
0392 120000      E     LCALL   _UART_PutString
0395         ?C0054:
                                           ; SOURCE LINE # 185
0395 120000      E     LCALL   UART_ReadTxStatus
0398 EF                MOV     A,R7
0399 30E1F9            JNB     ACC.1,?C0054
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 188
039C         ?C0055:
                                           ; SOURCE LINE # 190
039C 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 191
039F 7F03              MOV     R7,#03H
03A1 120000      E     LCALL   _UART_WriteTxData
03A4         ?C0056:
                                           ; SOURCE LINE # 192
03A4 120000      E     LCALL   UART_ReadTxStatus
03A7 EF                MOV     A,R7
03A8 30E1F9            JNB     ACC.1,?C0056
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 195
03AB         ?C0057:
                                           ; SOURCE LINE # 196
03AB 7F01              MOV     R7,#01H
03AD 120000      E     LCALL   _UART_WriteTxData
03B0         ?C0058:
                                           ; SOURCE LINE # 197
03B0 120000      E     LCALL   UART_ReadTxStatus
03B3 EF                MOV     A,R7
03B4 30E1F9            JNB     ACC.1,?C0058
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 200
03B7         ?C0059:
                                           ; SOURCE LINE # 201
03B7 900000      R     MOV     DPTR,#cmd_exct
03BA E4                CLR     A
03BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
03BC 900000      R     MOV     DPTR,#dat_cnt
03BF E4                CLR     A
03C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
03C1 020000      R     LJMP    ?C0180
03C4         ?C0053:
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 24  

                                           ; SOURCE LINE # 204
03C4 900000      R     MOV     DPTR,#word
03C7 E0                MOVX    A,@DPTR
03C8 FF                MOV     R7,A
03C9 EF                MOV     A,R7
03CA 6409              XRL     A,#09H
03CC 7045              JNZ     ?C0061
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
03CE 900000      E     MOV     DPTR,#i
03D1 E4                CLR     A
03D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
03D3 900000      R     MOV     DPTR,#word
03D6 E0                MOVX    A,@DPTR
03D7 FF                MOV     R7,A
03D8 900000      E     MOV     DPTR,#i
03DB E0                MOVX    A,@DPTR
03DC FE                MOV     R6,A
03DD 7400        R     MOV     A,#LOW rx_word
03DF 2E                ADD     A,R6
03E0 F582              MOV     DPL,A
03E2 E4                CLR     A
03E3 3400        R     ADDC    A,#HIGH rx_word
03E5 F583              MOV     DPH,A
03E7 EF                MOV     A,R7
03E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
03E9 900000      E     MOV     DPTR,#i
03EC E0                MOVX    A,@DPTR
03ED 04                INC     A
03EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
03EF 900000      R     MOV     DPTR,#dat_cnt
03F2 7402              MOV     A,#02H
03F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
03F5 900000      R     MOV     DPTR,#status
03F8 7403              MOV     A,#03H
03FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
03FB 7BFF              MOV     R3,#0FFH
03FD 7A00        R     MOV     R2,#HIGH ?SC_0
03FF 7900        R     MOV     R1,#LOW ?SC_0
0401 120000      E     LCALL   _UART_PutString
0404         ?C0062:
                                           ; SOURCE LINE # 213
0404 120000      E     LCALL   UART_ReadTxStatus
0407 EF                MOV     A,R7
0408 30E103            JNB     ACC.1,$ + 6H
040B 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 216
040E 80F4              SJMP    ?C0062
0410         ?C0063:
                                           ; SOURCE LINE # 217
0410 020000      R     LJMP    ?C0180
0413         ?C0061:
                                           ; SOURCE LINE # 218
0413 900000      R     MOV     DPTR,#word
0416 E0                MOVX    A,@DPTR
0417 FF                MOV     R7,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 25  

0418 EF                MOV     A,R7
0419 640A              XRL     A,#0AH
041B 7043              JNZ     ?C0065
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
041D 900000      E     MOV     DPTR,#i
0420 E4                CLR     A
0421 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0422 900000      R     MOV     DPTR,#word
0425 E0                MOVX    A,@DPTR
0426 FF                MOV     R7,A
0427 900000      E     MOV     DPTR,#i
042A E0                MOVX    A,@DPTR
042B FE                MOV     R6,A
042C 7400        R     MOV     A,#LOW rx_word
042E 2E                ADD     A,R6
042F F582              MOV     DPL,A
0431 E4                CLR     A
0432 3400        R     ADDC    A,#HIGH rx_word
0434 F583              MOV     DPH,A
0436 EF                MOV     A,R7
0437 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0438 900000      E     MOV     DPTR,#i
043B E0                MOVX    A,@DPTR
043C FF                MOV     R7,A
043D 7400        R     MOV     A,#LOW rx_word
043F 2F                ADD     A,R7
0440 F582              MOV     DPL,A
0442 E4                CLR     A
0443 3400        R     ADDC    A,#HIGH rx_word
0445 F583              MOV     DPH,A
0447 E0                MOVX    A,@DPTR
0448 FF                MOV     R7,A
0449 900000      R     MOV     DPTR,#switch_cmd
044C EF                MOV     A,R7
044D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
044E 7F01              MOV     R7,#01H
0450 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 225
0453 900000      R     MOV     DPTR,#cmd_exct
0456 E4                CLR     A
0457 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0458 900000      R     MOV     DPTR,#dat_cnt
045B E4                CLR     A
045C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
045D 020000      R     LJMP    ?C0180
0460         ?C0065:
                                           ; SOURCE LINE # 229
0460 900000      R     MOV     DPTR,#word
0463 E0                MOVX    A,@DPTR
0464 FF                MOV     R7,A
0465 EF                MOV     A,R7
0466 640B              XRL     A,#0BH
0468 7045              JNZ     ?C0067
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
046A 900000      E     MOV     DPTR,#i
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 26  

046D E4                CLR     A
046E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
046F 900000      R     MOV     DPTR,#word
0472 E0                MOVX    A,@DPTR
0473 FF                MOV     R7,A
0474 900000      E     MOV     DPTR,#i
0477 E0                MOVX    A,@DPTR
0478 FE                MOV     R6,A
0479 7400        R     MOV     A,#LOW rx_word
047B 2E                ADD     A,R6
047C F582              MOV     DPL,A
047E E4                CLR     A
047F 3400        R     ADDC    A,#HIGH rx_word
0481 F583              MOV     DPH,A
0483 EF                MOV     A,R7
0484 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0485 900000      E     MOV     DPTR,#i
0488 E0                MOVX    A,@DPTR
0489 04                INC     A
048A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
048B 900000      R     MOV     DPTR,#dat_cnt
048E 7401              MOV     A,#01H
0490 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
0491 900000      R     MOV     DPTR,#status
0494 7402              MOV     A,#02H
0496 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0497 7BFF              MOV     R3,#0FFH
0499 7A00        R     MOV     R2,#HIGH ?SC_0
049B 7900        R     MOV     R1,#LOW ?SC_0
049D 120000      E     LCALL   _UART_PutString
04A0         ?C0068:
                                           ; SOURCE LINE # 238
04A0 120000      E     LCALL   UART_ReadTxStatus
04A3 EF                MOV     A,R7
04A4 30E103            JNB     ACC.1,$ + 6H
04A7 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 241
04AA 80F4              SJMP    ?C0068
04AC         ?C0069:
                                           ; SOURCE LINE # 242
04AC 020000      R     LJMP    ?C0180
04AF         ?C0067:
                                           ; SOURCE LINE # 243
04AF 900000      R     MOV     DPTR,#word
04B2 E0                MOVX    A,@DPTR
04B3 FF                MOV     R7,A
04B4 EF                MOV     A,R7
04B5 640C              XRL     A,#0CH
04B7 7045              JNZ     ?C0071
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
04B9 900000      E     MOV     DPTR,#i
04BC E4                CLR     A
04BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
04BE 900000      R     MOV     DPTR,#word
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 27  

04C1 E0                MOVX    A,@DPTR
04C2 FF                MOV     R7,A
04C3 900000      E     MOV     DPTR,#i
04C6 E0                MOVX    A,@DPTR
04C7 FE                MOV     R6,A
04C8 7400        R     MOV     A,#LOW rx_word
04CA 2E                ADD     A,R6
04CB F582              MOV     DPL,A
04CD E4                CLR     A
04CE 3400        R     ADDC    A,#HIGH rx_word
04D0 F583              MOV     DPH,A
04D2 EF                MOV     A,R7
04D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
04D4 900000      E     MOV     DPTR,#i
04D7 E0                MOVX    A,@DPTR
04D8 04                INC     A
04D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
04DA 900000      R     MOV     DPTR,#dat_cnt
04DD 7401              MOV     A,#01H
04DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
04E0 900000      R     MOV     DPTR,#status
04E3 7402              MOV     A,#02H
04E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
04E6 7BFF              MOV     R3,#0FFH
04E8 7A00        R     MOV     R2,#HIGH ?SC_0
04EA 7900        R     MOV     R1,#LOW ?SC_0
04EC 120000      E     LCALL   _UART_PutString
04EF         ?C0072:
                                           ; SOURCE LINE # 252
04EF 120000      E     LCALL   UART_ReadTxStatus
04F2 EF                MOV     A,R7
04F3 30E103            JNB     ACC.1,$ + 6H
04F6 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
04F9 80F4              SJMP    ?C0072
04FB         ?C0073:
                                           ; SOURCE LINE # 256
04FB 020000      R     LJMP    ?C0180
04FE         ?C0071:
                                           ; SOURCE LINE # 257
04FE 900000      R     MOV     DPTR,#word
0501 E0                MOVX    A,@DPTR
0502 FF                MOV     R7,A
0503 EF                MOV     A,R7
0504 6410              XRL     A,#010H
0506 706C              JNZ     ?C0075
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
0508 900000      E     MOV     DPTR,#i
050B E4                CLR     A
050C F0                MOVX    @DPTR,A
050D         ?C0076:
050D 900000      E     MOV     DPTR,#i
0510 E0                MOVX    A,@DPTR
0511 FF                MOV     R7,A
0512 EF                MOV     A,R7
0513 D3                SETB    C
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 28  

0514 9408              SUBB    A,#08H
0516 5019              JNC     ?C0077
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0518 900000      E     MOV     DPTR,#i
051B E0                MOVX    A,@DPTR
051C FF                MOV     R7,A
051D 7400        R     MOV     A,#LOW rx_word
051F 2F                ADD     A,R7
0520 F582              MOV     DPL,A
0522 E4                CLR     A
0523 3400        R     ADDC    A,#HIGH rx_word
0525 F583              MOV     DPH,A
0527 E4                CLR     A
0528 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0529 900000      E     MOV     DPTR,#i
052C E0                MOVX    A,@DPTR
052D 04                INC     A
052E F0                MOVX    @DPTR,A
052F 80DC              SJMP    ?C0076
0531         ?C0077:
                                           ; SOURCE LINE # 263
0531 900000      E     MOV     DPTR,#i
0534 E4                CLR     A
0535 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0536 900000      R     MOV     DPTR,#word
0539 E0                MOVX    A,@DPTR
053A FF                MOV     R7,A
053B 900000      E     MOV     DPTR,#i
053E E0                MOVX    A,@DPTR
053F FE                MOV     R6,A
0540 7400        R     MOV     A,#LOW rx_word
0542 2E                ADD     A,R6
0543 F582              MOV     DPL,A
0545 E4                CLR     A
0546 3400        R     ADDC    A,#HIGH rx_word
0548 F583              MOV     DPH,A
054A EF                MOV     A,R7
054B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
054C 900000      E     MOV     DPTR,#i
054F E0                MOVX    A,@DPTR
0550 FF                MOV     R7,A
0551 7400        R     MOV     A,#LOW rx_word
0553 2F                ADD     A,R7
0554 F582              MOV     DPL,A
0556 E4                CLR     A
0557 3400        R     ADDC    A,#HIGH rx_word
0559 F583              MOV     DPH,A
055B E0                MOVX    A,@DPTR
055C FF                MOV     R7,A
055D 900000      R     MOV     DPTR,#switch_cmd
0560 EF                MOV     A,R7
0561 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0562 7F01              MOV     R7,#01H
0564 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 268
0567 900000      R     MOV     DPTR,#cmd_exct
056A E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 29  

056B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
056C 900000      R     MOV     DPTR,#dat_cnt
056F E4                CLR     A
0570 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0571 020000      R     LJMP    ?C0180
0574         ?C0075:
                                           ; SOURCE LINE # 272
0574 900000      R     MOV     DPTR,#word
0577 E0                MOVX    A,@DPTR
0578 FF                MOV     R7,A
0579 EF                MOV     A,R7
057A 6411              XRL     A,#011H
057C 706C              JNZ     ?C0080
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
057E 900000      E     MOV     DPTR,#i
0581 E4                CLR     A
0582 F0                MOVX    @DPTR,A
0583         ?C0081:
0583 900000      E     MOV     DPTR,#i
0586 E0                MOVX    A,@DPTR
0587 FF                MOV     R7,A
0588 EF                MOV     A,R7
0589 D3                SETB    C
058A 9408              SUBB    A,#08H
058C 5019              JNC     ?C0082
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
058E 900000      E     MOV     DPTR,#i
0591 E0                MOVX    A,@DPTR
0592 FF                MOV     R7,A
0593 7400        R     MOV     A,#LOW rx_word
0595 2F                ADD     A,R7
0596 F582              MOV     DPL,A
0598 E4                CLR     A
0599 3400        R     ADDC    A,#HIGH rx_word
059B F583              MOV     DPH,A
059D E4                CLR     A
059E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
059F 900000      E     MOV     DPTR,#i
05A2 E0                MOVX    A,@DPTR
05A3 04                INC     A
05A4 F0                MOVX    @DPTR,A
05A5 80DC              SJMP    ?C0081
05A7         ?C0082:
                                           ; SOURCE LINE # 278
05A7 900000      E     MOV     DPTR,#i
05AA E4                CLR     A
05AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
05AC 900000      R     MOV     DPTR,#word
05AF E0                MOVX    A,@DPTR
05B0 FF                MOV     R7,A
05B1 900000      E     MOV     DPTR,#i
05B4 E0                MOVX    A,@DPTR
05B5 FE                MOV     R6,A
05B6 7400        R     MOV     A,#LOW rx_word
05B8 2E                ADD     A,R6
05B9 F582              MOV     DPL,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 30  

05BB E4                CLR     A
05BC 3400        R     ADDC    A,#HIGH rx_word
05BE F583              MOV     DPH,A
05C0 EF                MOV     A,R7
05C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
05C2 900000      E     MOV     DPTR,#i
05C5 E0                MOVX    A,@DPTR
05C6 FF                MOV     R7,A
05C7 7400        R     MOV     A,#LOW rx_word
05C9 2F                ADD     A,R7
05CA F582              MOV     DPL,A
05CC E4                CLR     A
05CD 3400        R     ADDC    A,#HIGH rx_word
05CF F583              MOV     DPH,A
05D1 E0                MOVX    A,@DPTR
05D2 FF                MOV     R7,A
05D3 900000      R     MOV     DPTR,#switch_cmd
05D6 EF                MOV     A,R7
05D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
05D8 7F01              MOV     R7,#01H
05DA 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 283
05DD 900000      R     MOV     DPTR,#cmd_exct
05E0 E4                CLR     A
05E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
05E2 900000      R     MOV     DPTR,#dat_cnt
05E5 E4                CLR     A
05E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
05E7 020000      R     LJMP    ?C0180
05EA         ?C0080:
                                           ; SOURCE LINE # 287
05EA 900000      R     MOV     DPTR,#word
05ED E0                MOVX    A,@DPTR
05EE FF                MOV     R7,A
05EF EF                MOV     A,R7
05F0 6418              XRL     A,#018H
05F2 6003              JZ      $ + 5H
05F4 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
05F7 905021            MOV     DPTR,#05021H
05FA E0                MOVX    A,@DPTR
05FB FF                MOV     R7,A
05FC EF                MOV     A,R7
05FD 30E410            JNB     ACC.4,?C0086
                                           ; SOURCE LINE # 291
0600 900000      R     MOV     DPTR,#k_port
0603 E0                MOVX    A,@DPTR
0604 FF                MOV     R7,A
0605 EF                MOV     A,R7
0606 4480              ORL     A,#080H
0608 FF                MOV     R7,A
0609 900000      R     MOV     DPTR,#prb_sts
060C EF                MOV     A,R7
060D F0                MOVX    @DPTR,A
060E 800E              SJMP    ?C0087
0610         ?C0086:
                                           ; SOURCE LINE # 293
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 31  

0610 900000      R     MOV     DPTR,#k_port
0613 E0                MOVX    A,@DPTR
0614 FF                MOV     R7,A
0615 EF                MOV     A,R7
0616 547F              ANL     A,#07FH
0618 FF                MOV     R7,A
0619 900000      R     MOV     DPTR,#prb_sts
061C EF                MOV     A,R7
061D F0                MOVX    @DPTR,A
061E         ?C0087:
                                           ; SOURCE LINE # 295
061E 905020            MOV     DPTR,#05020H
0621 E0                MOVX    A,@DPTR
0622 FF                MOV     R7,A
0623 EF                MOV     A,R7
0624 30E410            JNB     ACC.4,?C0088
                                           ; SOURCE LINE # 296
0627 900000      R     MOV     DPTR,#k_port
062A E0                MOVX    A,@DPTR
062B FF                MOV     R7,A
062C EF                MOV     A,R7
062D 4440              ORL     A,#040H
062F FF                MOV     R7,A
0630 900000      R     MOV     DPTR,#prb_sts
0633 EF                MOV     A,R7
0634 F0                MOVX    @DPTR,A
0635 800E              SJMP    ?C0089
0637         ?C0088:
                                           ; SOURCE LINE # 298
0637 900000      R     MOV     DPTR,#k_port
063A E0                MOVX    A,@DPTR
063B FF                MOV     R7,A
063C EF                MOV     A,R7
063D 54BF              ANL     A,#0BFH
063F FF                MOV     R7,A
0640 900000      R     MOV     DPTR,#prb_sts
0643 EF                MOV     A,R7
0644 F0                MOVX    @DPTR,A
0645         ?C0089:
                                           ; SOURCE LINE # 300
0645 905063            MOV     DPTR,#05063H
0648 E0                MOVX    A,@DPTR
0649 FF                MOV     R7,A
064A EF                MOV     A,R7
064B 30E410            JNB     ACC.4,?C0090
                                           ; SOURCE LINE # 301
064E 900000      R     MOV     DPTR,#k_port
0651 E0                MOVX    A,@DPTR
0652 FF                MOV     R7,A
0653 EF                MOV     A,R7
0654 4420              ORL     A,#020H
0656 FF                MOV     R7,A
0657 900000      R     MOV     DPTR,#k_port
065A EF                MOV     A,R7
065B F0                MOVX    @DPTR,A
065C 800E              SJMP    ?C0091
065E         ?C0090:
                                           ; SOURCE LINE # 303
065E 900000      R     MOV     DPTR,#k_port
0661 E0                MOVX    A,@DPTR
0662 FF                MOV     R7,A
0663 EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 32  

0664 54DF              ANL     A,#0DFH
0666 FF                MOV     R7,A
0667 900000      R     MOV     DPTR,#k_port
066A EF                MOV     A,R7
066B F0                MOVX    @DPTR,A
066C         ?C0091:
                                           ; SOURCE LINE # 305
066C 905062            MOV     DPTR,#05062H
066F E0                MOVX    A,@DPTR
0670 FF                MOV     R7,A
0671 EF                MOV     A,R7
0672 30E410            JNB     ACC.4,?C0092
                                           ; SOURCE LINE # 306
0675 900000      R     MOV     DPTR,#k_port
0678 E0                MOVX    A,@DPTR
0679 FF                MOV     R7,A
067A EF                MOV     A,R7
067B 4410              ORL     A,#010H
067D FF                MOV     R7,A
067E 900000      R     MOV     DPTR,#prb_sts
0681 EF                MOV     A,R7
0682 F0                MOVX    @DPTR,A
0683 800E              SJMP    ?C0093
0685         ?C0092:
                                           ; SOURCE LINE # 308
0685 900000      R     MOV     DPTR,#k_port
0688 E0                MOVX    A,@DPTR
0689 FF                MOV     R7,A
068A EF                MOV     A,R7
068B 54EF              ANL     A,#0EFH
068D FF                MOV     R7,A
068E 900000      R     MOV     DPTR,#prb_sts
0691 EF                MOV     A,R7
0692 F0                MOVX    @DPTR,A
0693         ?C0093:
                                           ; SOURCE LINE # 310
0693 905003            MOV     DPTR,#05003H
0696 E0                MOVX    A,@DPTR
0697 FF                MOV     R7,A
0698 EF                MOV     A,R7
0699 30E410            JNB     ACC.4,?C0094
                                           ; SOURCE LINE # 311
069C 900000      R     MOV     DPTR,#k_port
069F E0                MOVX    A,@DPTR
06A0 FF                MOV     R7,A
06A1 EF                MOV     A,R7
06A2 4408              ORL     A,#08H
06A4 FF                MOV     R7,A
06A5 900000      R     MOV     DPTR,#prb_sts
06A8 EF                MOV     A,R7
06A9 F0                MOVX    @DPTR,A
06AA 800E              SJMP    ?C0095
06AC         ?C0094:
                                           ; SOURCE LINE # 313
06AC 900000      R     MOV     DPTR,#k_port
06AF E0                MOVX    A,@DPTR
06B0 FF                MOV     R7,A
06B1 EF                MOV     A,R7
06B2 54F7              ANL     A,#0F7H
06B4 FF                MOV     R7,A
06B5 900000      R     MOV     DPTR,#prb_sts
06B8 EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 33  

06B9 F0                MOVX    @DPTR,A
06BA         ?C0095:
                                           ; SOURCE LINE # 315
06BA 905002            MOV     DPTR,#05002H
06BD E0                MOVX    A,@DPTR
06BE FF                MOV     R7,A
06BF EF                MOV     A,R7
06C0 30E410            JNB     ACC.4,?C0096
                                           ; SOURCE LINE # 316
06C3 900000      R     MOV     DPTR,#k_port
06C6 E0                MOVX    A,@DPTR
06C7 FF                MOV     R7,A
06C8 EF                MOV     A,R7
06C9 4404              ORL     A,#04H
06CB FF                MOV     R7,A
06CC 900000      R     MOV     DPTR,#prb_sts
06CF EF                MOV     A,R7
06D0 F0                MOVX    @DPTR,A
06D1 800E              SJMP    ?C0097
06D3         ?C0096:
                                           ; SOURCE LINE # 318
06D3 900000      R     MOV     DPTR,#k_port
06D6 E0                MOVX    A,@DPTR
06D7 FF                MOV     R7,A
06D8 EF                MOV     A,R7
06D9 54FB              ANL     A,#0FBH
06DB FF                MOV     R7,A
06DC 900000      R     MOV     DPTR,#prb_sts
06DF EF                MOV     A,R7
06E0 F0                MOVX    @DPTR,A
06E1         ?C0097:
                                           ; SOURCE LINE # 320
06E1 905001            MOV     DPTR,#05001H
06E4 E0                MOVX    A,@DPTR
06E5 FF                MOV     R7,A
06E6 EF                MOV     A,R7
06E7 30E410            JNB     ACC.4,?C0098
                                           ; SOURCE LINE # 321
06EA 900000      R     MOV     DPTR,#k_port
06ED E0                MOVX    A,@DPTR
06EE FF                MOV     R7,A
06EF EF                MOV     A,R7
06F0 4402              ORL     A,#02H
06F2 FF                MOV     R7,A
06F3 900000      R     MOV     DPTR,#prb_sts
06F6 EF                MOV     A,R7
06F7 F0                MOVX    @DPTR,A
06F8 800E              SJMP    ?C0099
06FA         ?C0098:
                                           ; SOURCE LINE # 323
06FA 900000      R     MOV     DPTR,#k_port
06FD E0                MOVX    A,@DPTR
06FE FF                MOV     R7,A
06FF EF                MOV     A,R7
0700 54FD              ANL     A,#0FDH
0702 FF                MOV     R7,A
0703 900000      R     MOV     DPTR,#prb_sts
0706 EF                MOV     A,R7
0707 F0                MOVX    @DPTR,A
0708         ?C0099:
                                           ; SOURCE LINE # 325
0708 905000            MOV     DPTR,#05000H
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 34  

070B E0                MOVX    A,@DPTR
070C FF                MOV     R7,A
070D EF                MOV     A,R7
070E 30E410            JNB     ACC.4,?C0100
                                           ; SOURCE LINE # 326
0711 900000      R     MOV     DPTR,#k_port
0714 E0                MOVX    A,@DPTR
0715 FF                MOV     R7,A
0716 EF                MOV     A,R7
0717 4401              ORL     A,#01H
0719 FF                MOV     R7,A
071A 900000      R     MOV     DPTR,#prb_sts
071D EF                MOV     A,R7
071E F0                MOVX    @DPTR,A
071F 800E              SJMP    ?C0101
0721         ?C0100:
                                           ; SOURCE LINE # 328
0721 900000      R     MOV     DPTR,#k_port
0724 E0                MOVX    A,@DPTR
0725 FF                MOV     R7,A
0726 EF                MOV     A,R7
0727 54FE              ANL     A,#0FEH
0729 FF                MOV     R7,A
072A 900000      R     MOV     DPTR,#prb_sts
072D EF                MOV     A,R7
072E F0                MOVX    @DPTR,A
072F         ?C0101:
                                           ; SOURCE LINE # 330
072F 900000      R     MOV     DPTR,#prb_sts
0732 E0                MOVX    A,@DPTR
0733 FF                MOV     R7,A
0734 EF                MOV     A,R7
0735 F4                CPL     A
0736 FF                MOV     R7,A
0737 900000      R     MOV     DPTR,#prb_sts
073A EF                MOV     A,R7
073B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
073C 900000      R     MOV     DPTR,#prb_sts
073F E0                MOVX    A,@DPTR
0740 FF                MOV     R7,A
0741 EF                MOV     A,R7
0742 5488              ANL     A,#088H
0744 FF                MOV     R7,A
0745 900000      R     MOV     DPTR,#prb_sts
0748 EF                MOV     A,R7
0749 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
074A 900000      R     MOV     DPTR,#prb_sts
074D E0                MOVX    A,@DPTR
074E FF                MOV     R7,A
074F EF                MOV     A,R7
0750 13                RRC     A
0751 13                RRC     A
0752 13                RRC     A
0753 541F              ANL     A,#01FH
0755 FF                MOV     R7,A
0756 900000      R     MOV     DPTR,#prb_sts
0759 EF                MOV     A,R7
075A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
075B 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 35  

075D 7A00        R     MOV     R2,#HIGH ?SC_5
075F 7900        R     MOV     R1,#LOW ?SC_5
0761 120000      E     LCALL   _UART_PutString
0764         ?C0102:
                                           ; SOURCE LINE # 335
0764 120000      E     LCALL   UART_ReadTxStatus
0767 EF                MOV     A,R7
0768 30E1F9            JNB     ACC.1,?C0102
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 338
076B         ?C0103:
                                           ; SOURCE LINE # 340
076B 7BFF              MOV     R3,#0FFH
076D 7A00        R     MOV     R2,#HIGH ?SC_5
076F 7900        R     MOV     R1,#LOW ?SC_5
0771 120000      E     LCALL   _UART_PutString
0774         ?C0104:
                                           ; SOURCE LINE # 341
0774 120000      E     LCALL   UART_ReadTxStatus
0777 EF                MOV     A,R7
0778 30E1F9            JNB     ACC.1,?C0104
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
077B         ?C0105:
                                           ; SOURCE LINE # 346
077B 7BFF              MOV     R3,#0FFH
077D 7A00        R     MOV     R2,#HIGH ?SC_5
077F 7900        R     MOV     R1,#LOW ?SC_5
0781 120000      E     LCALL   _UART_PutString
0784         ?C0106:
                                           ; SOURCE LINE # 347
0784 120000      E     LCALL   UART_ReadTxStatus
0787 EF                MOV     A,R7
0788 30E1F9            JNB     ACC.1,?C0106
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 350
078B         ?C0107:
                                           ; SOURCE LINE # 352
078B 7BFF              MOV     R3,#0FFH
078D 7A00        R     MOV     R2,#HIGH ?SC_7
078F 7900        R     MOV     R1,#LOW ?SC_7
0791 120000      E     LCALL   _UART_PutString
0794         ?C0108:
                                           ; SOURCE LINE # 353
0794 120000      E     LCALL   UART_ReadTxStatus
0797 EF                MOV     A,R7
0798 30E1F9            JNB     ACC.1,?C0108
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 356
079B         ?C0109:
                                           ; SOURCE LINE # 358
079B 900000      R     MOV     DPTR,#prb_sts
079E E0                MOVX    A,@DPTR
079F FF                MOV     R7,A
07A0 120000      E     LCALL   _UART_WriteTxData
07A3         ?C0110:
                                           ; SOURCE LINE # 359
07A3 120000      E     LCALL   UART_ReadTxStatus
07A6 EF                MOV     A,R7
07A7 30E1F9            JNB     ACC.1,?C0110
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 362
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 36  

07AA         ?C0111:
                                           ; SOURCE LINE # 364
07AA 900000      R     MOV     DPTR,#cmd_exct
07AD E4                CLR     A
07AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
07AF 900000      R     MOV     DPTR,#dat_cnt
07B2 E4                CLR     A
07B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
07B4 020000      R     LJMP    ?C0180
07B7         ?C0085:
                                           ; SOURCE LINE # 367
07B7 900000      R     MOV     DPTR,#word
07BA E0                MOVX    A,@DPTR
07BB FF                MOV     R7,A
07BC EF                MOV     A,R7
07BD 641C              XRL     A,#01CH
07BF 7045              JNZ     ?C0113
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
07C1 900000      E     MOV     DPTR,#i
07C4 E4                CLR     A
07C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
07C6 900000      R     MOV     DPTR,#word
07C9 E0                MOVX    A,@DPTR
07CA FF                MOV     R7,A
07CB 900000      E     MOV     DPTR,#i
07CE E0                MOVX    A,@DPTR
07CF FE                MOV     R6,A
07D0 7400        R     MOV     A,#LOW rx_word
07D2 2E                ADD     A,R6
07D3 F582              MOV     DPL,A
07D5 E4                CLR     A
07D6 3400        R     ADDC    A,#HIGH rx_word
07D8 F583              MOV     DPH,A
07DA EF                MOV     A,R7
07DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
07DC 900000      E     MOV     DPTR,#i
07DF E0                MOVX    A,@DPTR
07E0 04                INC     A
07E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
07E2 900000      R     MOV     DPTR,#dat_cnt
07E5 7401              MOV     A,#01H
07E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
07E8 900000      R     MOV     DPTR,#status
07EB 7402              MOV     A,#02H
07ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
07EE 7BFF              MOV     R3,#0FFH
07F0 7A00        R     MOV     R2,#HIGH ?SC_0
07F2 7900        R     MOV     R1,#LOW ?SC_0
07F4 120000      E     LCALL   _UART_PutString
07F7         ?C0114:
                                           ; SOURCE LINE # 376
07F7 120000      E     LCALL   UART_ReadTxStatus
07FA EF                MOV     A,R7
07FB 30E103            JNB     ACC.1,$ + 6H
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 37  

07FE 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
0801 80F4              SJMP    ?C0114
0803         ?C0115:
                                           ; SOURCE LINE # 380
0803 020000      R     LJMP    ?C0180
0806         ?C0113:
                                           ; SOURCE LINE # 381
0806 900000      R     MOV     DPTR,#word
0809 E0                MOVX    A,@DPTR
080A FF                MOV     R7,A
080B EF                MOV     A,R7
080C 6440              XRL     A,#040H
080E 706C              JNZ     ?C0117
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0810 900000      E     MOV     DPTR,#i
0813 E4                CLR     A
0814 F0                MOVX    @DPTR,A
0815         ?C0118:
0815 900000      E     MOV     DPTR,#i
0818 E0                MOVX    A,@DPTR
0819 FF                MOV     R7,A
081A EF                MOV     A,R7
081B D3                SETB    C
081C 9408              SUBB    A,#08H
081E 5019              JNC     ?C0119
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0820 900000      E     MOV     DPTR,#i
0823 E0                MOVX    A,@DPTR
0824 FF                MOV     R7,A
0825 7400        R     MOV     A,#LOW rx_word
0827 2F                ADD     A,R7
0828 F582              MOV     DPL,A
082A E4                CLR     A
082B 3400        R     ADDC    A,#HIGH rx_word
082D F583              MOV     DPH,A
082F E4                CLR     A
0830 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0831 900000      E     MOV     DPTR,#i
0834 E0                MOVX    A,@DPTR
0835 04                INC     A
0836 F0                MOVX    @DPTR,A
0837 80DC              SJMP    ?C0118
0839         ?C0119:
                                           ; SOURCE LINE # 387
0839 900000      E     MOV     DPTR,#i
083C E4                CLR     A
083D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
083E 900000      R     MOV     DPTR,#word
0841 E0                MOVX    A,@DPTR
0842 FF                MOV     R7,A
0843 900000      E     MOV     DPTR,#i
0846 E0                MOVX    A,@DPTR
0847 FE                MOV     R6,A
0848 7400        R     MOV     A,#LOW rx_word
084A 2E                ADD     A,R6
084B F582              MOV     DPL,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 38  

084D E4                CLR     A
084E 3400        R     ADDC    A,#HIGH rx_word
0850 F583              MOV     DPH,A
0852 EF                MOV     A,R7
0853 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0854 900000      E     MOV     DPTR,#i
0857 E0                MOVX    A,@DPTR
0858 FF                MOV     R7,A
0859 7400        R     MOV     A,#LOW rx_word
085B 2F                ADD     A,R7
085C F582              MOV     DPL,A
085E E4                CLR     A
085F 3400        R     ADDC    A,#HIGH rx_word
0861 F583              MOV     DPH,A
0863 E0                MOVX    A,@DPTR
0864 FF                MOV     R7,A
0865 900000      R     MOV     DPTR,#switch_cmd
0868 EF                MOV     A,R7
0869 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
086A 7F01              MOV     R7,#01H
086C 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 392
086F 900000      R     MOV     DPTR,#cmd_exct
0872 E4                CLR     A
0873 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0874 900000      R     MOV     DPTR,#dat_cnt
0877 E4                CLR     A
0878 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0879 020000      R     LJMP    ?C0180
087C         ?C0117:
                                           ; SOURCE LINE # 396
087C 900000      R     MOV     DPTR,#word
087F E0                MOVX    A,@DPTR
0880 FF                MOV     R7,A
0881 EF                MOV     A,R7
0882 6445              XRL     A,#045H
0884 706C              JNZ     ?C0122
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
0886 900000      E     MOV     DPTR,#i
0889 E4                CLR     A
088A F0                MOVX    @DPTR,A
088B         ?C0123:
088B 900000      E     MOV     DPTR,#i
088E E0                MOVX    A,@DPTR
088F FF                MOV     R7,A
0890 EF                MOV     A,R7
0891 D3                SETB    C
0892 9408              SUBB    A,#08H
0894 5019              JNC     ?C0124
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0896 900000      E     MOV     DPTR,#i
0899 E0                MOVX    A,@DPTR
089A FF                MOV     R7,A
089B 7400        R     MOV     A,#LOW rx_word
089D 2F                ADD     A,R7
089E F582              MOV     DPL,A
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 39  

08A0 E4                CLR     A
08A1 3400        R     ADDC    A,#HIGH rx_word
08A3 F583              MOV     DPH,A
08A5 E4                CLR     A
08A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
08A7 900000      E     MOV     DPTR,#i
08AA E0                MOVX    A,@DPTR
08AB 04                INC     A
08AC F0                MOVX    @DPTR,A
08AD 80DC              SJMP    ?C0123
08AF         ?C0124:
                                           ; SOURCE LINE # 402
08AF 900000      E     MOV     DPTR,#i
08B2 E4                CLR     A
08B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
08B4 900000      R     MOV     DPTR,#word
08B7 E0                MOVX    A,@DPTR
08B8 FF                MOV     R7,A
08B9 900000      E     MOV     DPTR,#i
08BC E0                MOVX    A,@DPTR
08BD FE                MOV     R6,A
08BE 7400        R     MOV     A,#LOW rx_word
08C0 2E                ADD     A,R6
08C1 F582              MOV     DPL,A
08C3 E4                CLR     A
08C4 3400        R     ADDC    A,#HIGH rx_word
08C6 F583              MOV     DPH,A
08C8 EF                MOV     A,R7
08C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
08CA 900000      E     MOV     DPTR,#i
08CD E0                MOVX    A,@DPTR
08CE FF                MOV     R7,A
08CF 7400        R     MOV     A,#LOW rx_word
08D1 2F                ADD     A,R7
08D2 F582              MOV     DPL,A
08D4 E4                CLR     A
08D5 3400        R     ADDC    A,#HIGH rx_word
08D7 F583              MOV     DPH,A
08D9 E0                MOVX    A,@DPTR
08DA FF                MOV     R7,A
08DB 900000      R     MOV     DPTR,#switch_cmd
08DE EF                MOV     A,R7
08DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
08E0 7F01              MOV     R7,#01H
08E2 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 407
08E5 900000      R     MOV     DPTR,#cmd_exct
08E8 E4                CLR     A
08E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
08EA 900000      R     MOV     DPTR,#dat_cnt
08ED E4                CLR     A
08EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
08EF 020000      R     LJMP    ?C0180
08F2         ?C0122:
                                           ; SOURCE LINE # 411
08F2 900000      R     MOV     DPTR,#word
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 40  

08F5 E0                MOVX    A,@DPTR
08F6 FF                MOV     R7,A
08F7 EF                MOV     A,R7
08F8 6446              XRL     A,#046H
08FA 706C              JNZ     ?C0127
                                           ; SOURCE LINE # 412
08FC 900000      E     MOV     DPTR,#i
08FF E4                CLR     A
0900 F0                MOVX    @DPTR,A
0901         ?C0128:
0901 900000      E     MOV     DPTR,#i
0904 E0                MOVX    A,@DPTR
0905 FF                MOV     R7,A
0906 EF                MOV     A,R7
0907 D3                SETB    C
0908 9408              SUBB    A,#08H
090A 5019              JNC     ?C0129
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
090C 900000      E     MOV     DPTR,#i
090F E0                MOVX    A,@DPTR
0910 FF                MOV     R7,A
0911 7400        R     MOV     A,#LOW rx_word
0913 2F                ADD     A,R7
0914 F582              MOV     DPL,A
0916 E4                CLR     A
0917 3400        R     ADDC    A,#HIGH rx_word
0919 F583              MOV     DPH,A
091B E4                CLR     A
091C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
091D 900000      E     MOV     DPTR,#i
0920 E0                MOVX    A,@DPTR
0921 04                INC     A
0922 F0                MOVX    @DPTR,A
0923 80DC              SJMP    ?C0128
0925         ?C0129:
                                           ; SOURCE LINE # 416
0925 900000      E     MOV     DPTR,#i
0928 E4                CLR     A
0929 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
092A 900000      R     MOV     DPTR,#word
092D E0                MOVX    A,@DPTR
092E FF                MOV     R7,A
092F 900000      E     MOV     DPTR,#i
0932 E0                MOVX    A,@DPTR
0933 FE                MOV     R6,A
0934 7400        R     MOV     A,#LOW rx_word
0936 2E                ADD     A,R6
0937 F582              MOV     DPL,A
0939 E4                CLR     A
093A 3400        R     ADDC    A,#HIGH rx_word
093C F583              MOV     DPH,A
093E EF                MOV     A,R7
093F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
0940 900000      E     MOV     DPTR,#i
0943 E0                MOVX    A,@DPTR
0944 FF                MOV     R7,A
0945 7400        R     MOV     A,#LOW rx_word
0947 2F                ADD     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 41  

0948 F582              MOV     DPL,A
094A E4                CLR     A
094B 3400        R     ADDC    A,#HIGH rx_word
094D F583              MOV     DPH,A
094F E0                MOVX    A,@DPTR
0950 FF                MOV     R7,A
0951 900000      R     MOV     DPTR,#switch_cmd
0954 EF                MOV     A,R7
0955 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0956 7F01              MOV     R7,#01H
0958 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 421
095B 900000      R     MOV     DPTR,#cmd_exct
095E E4                CLR     A
095F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
0960 900000      R     MOV     DPTR,#dat_cnt
0963 E4                CLR     A
0964 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
0965 020000      R     LJMP    ?C0180
0968         ?C0127:
                                           ; SOURCE LINE # 425
0968 900000      R     MOV     DPTR,#word
096B E0                MOVX    A,@DPTR
096C FF                MOV     R7,A
096D EF                MOV     A,R7
096E 6447              XRL     A,#047H
0970 706C              JNZ     ?C0132
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0972 900000      E     MOV     DPTR,#i
0975 E4                CLR     A
0976 F0                MOVX    @DPTR,A
0977         ?C0133:
0977 900000      E     MOV     DPTR,#i
097A E0                MOVX    A,@DPTR
097B FF                MOV     R7,A
097C EF                MOV     A,R7
097D D3                SETB    C
097E 9408              SUBB    A,#08H
0980 5019              JNC     ?C0134
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0982 900000      E     MOV     DPTR,#i
0985 E0                MOVX    A,@DPTR
0986 FF                MOV     R7,A
0987 7400        R     MOV     A,#LOW rx_word
0989 2F                ADD     A,R7
098A F582              MOV     DPL,A
098C E4                CLR     A
098D 3400        R     ADDC    A,#HIGH rx_word
098F F583              MOV     DPH,A
0991 E4                CLR     A
0992 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0993 900000      E     MOV     DPTR,#i
0996 E0                MOVX    A,@DPTR
0997 04                INC     A
0998 F0                MOVX    @DPTR,A
0999 80DC              SJMP    ?C0133
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 42  

099B         ?C0134:
                                           ; SOURCE LINE # 431
099B 900000      E     MOV     DPTR,#i
099E E4                CLR     A
099F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
09A0 900000      R     MOV     DPTR,#word
09A3 E0                MOVX    A,@DPTR
09A4 FF                MOV     R7,A
09A5 900000      E     MOV     DPTR,#i
09A8 E0                MOVX    A,@DPTR
09A9 FE                MOV     R6,A
09AA 7400        R     MOV     A,#LOW rx_word
09AC 2E                ADD     A,R6
09AD F582              MOV     DPL,A
09AF E4                CLR     A
09B0 3400        R     ADDC    A,#HIGH rx_word
09B2 F583              MOV     DPH,A
09B4 EF                MOV     A,R7
09B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
09B6 900000      E     MOV     DPTR,#i
09B9 E0                MOVX    A,@DPTR
09BA FF                MOV     R7,A
09BB 7400        R     MOV     A,#LOW rx_word
09BD 2F                ADD     A,R7
09BE F582              MOV     DPL,A
09C0 E4                CLR     A
09C1 3400        R     ADDC    A,#HIGH rx_word
09C3 F583              MOV     DPH,A
09C5 E0                MOVX    A,@DPTR
09C6 FF                MOV     R7,A
09C7 900000      R     MOV     DPTR,#switch_cmd
09CA EF                MOV     A,R7
09CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
09CC 7F01              MOV     R7,#01H
09CE 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 436
09D1 900000      R     MOV     DPTR,#cmd_exct
09D4 E4                CLR     A
09D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
09D6 900000      R     MOV     DPTR,#dat_cnt
09D9 E4                CLR     A
09DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
09DB 020000      R     LJMP    ?C0180
09DE         ?C0132:
                                           ; SOURCE LINE # 440
09DE 900000      R     MOV     DPTR,#word
09E1 E0                MOVX    A,@DPTR
09E2 FF                MOV     R7,A
09E3 EF                MOV     A,R7
09E4 6448              XRL     A,#048H
09E6 706C              JNZ     ?C0137
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
09E8 900000      E     MOV     DPTR,#i
09EB E4                CLR     A
09EC F0                MOVX    @DPTR,A
09ED         ?C0138:
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 43  

09ED 900000      E     MOV     DPTR,#i
09F0 E0                MOVX    A,@DPTR
09F1 FF                MOV     R7,A
09F2 EF                MOV     A,R7
09F3 D3                SETB    C
09F4 9408              SUBB    A,#08H
09F6 5019              JNC     ?C0139
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
09F8 900000      E     MOV     DPTR,#i
09FB E0                MOVX    A,@DPTR
09FC FF                MOV     R7,A
09FD 7400        R     MOV     A,#LOW rx_word
09FF 2F                ADD     A,R7
0A00 F582              MOV     DPL,A
0A02 E4                CLR     A
0A03 3400        R     ADDC    A,#HIGH rx_word
0A05 F583              MOV     DPH,A
0A07 E4                CLR     A
0A08 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0A09 900000      E     MOV     DPTR,#i
0A0C E0                MOVX    A,@DPTR
0A0D 04                INC     A
0A0E F0                MOVX    @DPTR,A
0A0F 80DC              SJMP    ?C0138
0A11         ?C0139:
                                           ; SOURCE LINE # 446
0A11 900000      E     MOV     DPTR,#i
0A14 E4                CLR     A
0A15 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0A16 900000      R     MOV     DPTR,#word
0A19 E0                MOVX    A,@DPTR
0A1A FF                MOV     R7,A
0A1B 900000      E     MOV     DPTR,#i
0A1E E0                MOVX    A,@DPTR
0A1F FE                MOV     R6,A
0A20 7400        R     MOV     A,#LOW rx_word
0A22 2E                ADD     A,R6
0A23 F582              MOV     DPL,A
0A25 E4                CLR     A
0A26 3400        R     ADDC    A,#HIGH rx_word
0A28 F583              MOV     DPH,A
0A2A EF                MOV     A,R7
0A2B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0A2C 900000      E     MOV     DPTR,#i
0A2F E0                MOVX    A,@DPTR
0A30 FF                MOV     R7,A
0A31 7400        R     MOV     A,#LOW rx_word
0A33 2F                ADD     A,R7
0A34 F582              MOV     DPL,A
0A36 E4                CLR     A
0A37 3400        R     ADDC    A,#HIGH rx_word
0A39 F583              MOV     DPH,A
0A3B E0                MOVX    A,@DPTR
0A3C FF                MOV     R7,A
0A3D 900000      R     MOV     DPTR,#switch_cmd
0A40 EF                MOV     A,R7
0A41 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 44  

0A42 7F01              MOV     R7,#01H
0A44 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 451
0A47 900000      R     MOV     DPTR,#cmd_exct
0A4A E4                CLR     A
0A4B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0A4C 900000      R     MOV     DPTR,#dat_cnt
0A4F E4                CLR     A
0A50 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0A51 020000      R     LJMP    ?C0180
0A54         ?C0137:
                                           ; SOURCE LINE # 455
0A54 900000      R     MOV     DPTR,#word
0A57 E0                MOVX    A,@DPTR
0A58 FF                MOV     R7,A
0A59 EF                MOV     A,R7
0A5A 6450              XRL     A,#050H
0A5C 7045              JNZ     ?C0142
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
0A5E 900000      E     MOV     DPTR,#i
0A61 E4                CLR     A
0A62 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
0A63 900000      R     MOV     DPTR,#word
0A66 E0                MOVX    A,@DPTR
0A67 FF                MOV     R7,A
0A68 900000      E     MOV     DPTR,#i
0A6B E0                MOVX    A,@DPTR
0A6C FE                MOV     R6,A
0A6D 7400        R     MOV     A,#LOW rx_word
0A6F 2E                ADD     A,R6
0A70 F582              MOV     DPL,A
0A72 E4                CLR     A
0A73 3400        R     ADDC    A,#HIGH rx_word
0A75 F583              MOV     DPH,A
0A77 EF                MOV     A,R7
0A78 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0A79 900000      E     MOV     DPTR,#i
0A7C E0                MOVX    A,@DPTR
0A7D 04                INC     A
0A7E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0A7F 900000      R     MOV     DPTR,#dat_cnt
0A82 7401              MOV     A,#01H
0A84 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0A85 900000      R     MOV     DPTR,#status
0A88 7402              MOV     A,#02H
0A8A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0A8B 7BFF              MOV     R3,#0FFH
0A8D 7A00        R     MOV     R2,#HIGH ?SC_0
0A8F 7900        R     MOV     R1,#LOW ?SC_0
0A91 120000      E     LCALL   _UART_PutString
0A94         ?C0143:
                                           ; SOURCE LINE # 464
0A94 120000      E     LCALL   UART_ReadTxStatus
0A97 EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 45  

0A98 30E103            JNB     ACC.1,$ + 6H
0A9B 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
0A9E 80F4              SJMP    ?C0143
0AA0         ?C0144:
                                           ; SOURCE LINE # 468
0AA0 020000      R     LJMP    ?C0180
0AA3         ?C0142:
                                           ; SOURCE LINE # 469
0AA3 900000      R     MOV     DPTR,#word
0AA6 E0                MOVX    A,@DPTR
0AA7 FF                MOV     R7,A
0AA8 EF                MOV     A,R7
0AA9 6451              XRL     A,#051H
0AAB 7049              JNZ     ?C0146
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
0AAD 900000      E     MOV     DPTR,#i
0AB0 E4                CLR     A
0AB1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
0AB2 900000      R     MOV     DPTR,#word
0AB5 E0                MOVX    A,@DPTR
0AB6 FF                MOV     R7,A
0AB7 900000      E     MOV     DPTR,#i
0ABA E0                MOVX    A,@DPTR
0ABB FE                MOV     R6,A
0ABC 7400        R     MOV     A,#LOW rx_word
0ABE 2E                ADD     A,R6
0ABF F582              MOV     DPL,A
0AC1 E4                CLR     A
0AC2 3400        R     ADDC    A,#HIGH rx_word
0AC4 F583              MOV     DPH,A
0AC6 EF                MOV     A,R7
0AC7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0AC8 900000      E     MOV     DPTR,#i
0ACB E0                MOVX    A,@DPTR
0ACC 04                INC     A
0ACD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0ACE 900000      R     MOV     DPTR,#dat_cnt
0AD1 7401              MOV     A,#01H
0AD3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
0AD4 900000      R     MOV     DPTR,#status
0AD7 7402              MOV     A,#02H
0AD9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0ADA 120000      E     LCALL   UART_ClearRxBuffer
                                           ; SOURCE LINE # 478
0ADD 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 479
0AE0 7BFF              MOV     R3,#0FFH
0AE2 7A00        R     MOV     R2,#HIGH ?SC_0
0AE4 7900        R     MOV     R1,#LOW ?SC_0
0AE6 120000      E     LCALL   _UART_PutString
0AE9         ?C0147:
                                           ; SOURCE LINE # 480
0AE9 120000      E     LCALL   UART_ReadTxStatus
0AEC EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 46  

0AED 30E1F9            JNB     ACC.1,?C0147
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 483
0AF0         ?C0148:
                                           ; SOURCE LINE # 484
0AF0 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 485
0AF3 020000      R     LJMP    ?C0180
0AF6         ?C0146:
                                           ; SOURCE LINE # 486
0AF6 900000      R     MOV     DPTR,#word
0AF9 E0                MOVX    A,@DPTR
0AFA FF                MOV     R7,A
0AFB EF                MOV     A,R7
0AFC 6455              XRL     A,#055H
0AFE 702F              JNZ     ?C0150
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
0B00 7BFF              MOV     R3,#0FFH
0B02 7A00        R     MOV     R2,#HIGH ?SC_0
0B04 7900        R     MOV     R1,#LOW ?SC_0
0B06 120000      E     LCALL   _UART_PutString
0B09         ?C0151:
                                           ; SOURCE LINE # 489
0B09 120000      E     LCALL   UART_ReadTxStatus
0B0C EF                MOV     A,R7
0B0D 30E1F9            JNB     ACC.1,?C0151
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 492
0B10         ?C0152:
                                           ; SOURCE LINE # 494
0B10 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 495
0B13 900000      R     MOV     DPTR,#word
0B16 E0                MOVX    A,@DPTR
0B17 FF                MOV     R7,A
0B18 120000      E     LCALL   _UART_WriteTxData
0B1B         ?C0153:
                                           ; SOURCE LINE # 496
0B1B 120000      E     LCALL   UART_ReadTxStatus
0B1E EF                MOV     A,R7
0B1F 30E1F9            JNB     ACC.1,?C0153
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 499
0B22         ?C0154:
                                           ; SOURCE LINE # 500
0B22 900000      R     MOV     DPTR,#cmd_exct
0B25 E4                CLR     A
0B26 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0B27 900000      R     MOV     DPTR,#dat_cnt
0B2A E4                CLR     A
0B2B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
0B2C 020000      R     LJMP    ?C0180
0B2F         ?C0150:
                                           ; SOURCE LINE # 503
0B2F 900000      R     MOV     DPTR,#word
0B32 E0                MOVX    A,@DPTR
0B33 FF                MOV     R7,A
0B34 EF                MOV     A,R7
0B35 B40D28            CJNE    A,#0DH,?C0156
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 47  

                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
0B38 900000      R     MOV     DPTR,#cmd_exct
0B3B E4                CLR     A
0B3C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
0B3D 900000      R     MOV     DPTR,#dat_cnt
0B40 E4                CLR     A
0B41 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0B42 900000      E     MOV     DPTR,#prnt_en
0B45 7401              MOV     A,#01H
0B47 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0B48 7BFF              MOV     R3,#0FFH
0B4A 7A00        R     MOV     R2,#HIGH ?SC_0
0B4C 7900        R     MOV     R1,#LOW ?SC_0
0B4E 120000      E     LCALL   _UART_PutString
0B51         ?C0157:
                                           ; SOURCE LINE # 510
0B51 120000      E     LCALL   UART_ReadTxStatus
0B54 EF                MOV     A,R7
0B55 30E1F9            JNB     ACC.1,?C0157
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 513
0B58         ?C0158:
                                           ; SOURCE LINE # 515
0B58 7F01              MOV     R7,#01H
0B5A 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 516
0B5D 020000      R     LJMP    ?C0180
0B60         ?C0156:
                                           ; SOURCE LINE # 517
0B60 900000      R     MOV     DPTR,#word
0B63 E0                MOVX    A,@DPTR
0B64 FF                MOV     R7,A
0B65 EF                MOV     A,R7
0B66 64DE              XRL     A,#0DEH
0B68 706E              JNZ     ?C0160
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0B6A 900000      E     MOV     DPTR,#i
0B6D E4                CLR     A
0B6E F0                MOVX    @DPTR,A
0B6F         ?C0161:
0B6F 900000      E     MOV     DPTR,#i
0B72 E0                MOVX    A,@DPTR
0B73 FF                MOV     R7,A
0B74 EF                MOV     A,R7
0B75 D3                SETB    C
0B76 9408              SUBB    A,#08H
0B78 5019              JNC     ?C0162
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
0B7A 900000      E     MOV     DPTR,#i
0B7D E0                MOVX    A,@DPTR
0B7E FF                MOV     R7,A
0B7F 7400        R     MOV     A,#LOW rx_word
0B81 2F                ADD     A,R7
0B82 F582              MOV     DPL,A
0B84 E4                CLR     A
0B85 3400        R     ADDC    A,#HIGH rx_word
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 48  

0B87 F583              MOV     DPH,A
0B89 E4                CLR     A
0B8A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 522
0B8B 900000      E     MOV     DPTR,#i
0B8E E0                MOVX    A,@DPTR
0B8F 04                INC     A
0B90 F0                MOVX    @DPTR,A
0B91 80DC              SJMP    ?C0161
0B93         ?C0162:
                                           ; SOURCE LINE # 523
0B93 900000      E     MOV     DPTR,#i
0B96 E4                CLR     A
0B97 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
0B98 900000      R     MOV     DPTR,#word
0B9B E0                MOVX    A,@DPTR
0B9C FF                MOV     R7,A
0B9D 900000      E     MOV     DPTR,#i
0BA0 E0                MOVX    A,@DPTR
0BA1 FE                MOV     R6,A
0BA2 7400        R     MOV     A,#LOW rx_word
0BA4 2E                ADD     A,R6
0BA5 F582              MOV     DPL,A
0BA7 E4                CLR     A
0BA8 3400        R     ADDC    A,#HIGH rx_word
0BAA F583              MOV     DPH,A
0BAC EF                MOV     A,R7
0BAD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0BAE 900000      E     MOV     DPTR,#i
0BB1 E0                MOVX    A,@DPTR
0BB2 04                INC     A
0BB3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0BB4 900000      R     MOV     DPTR,#dat_cnt
0BB7 7402              MOV     A,#02H
0BB9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
0BBA 900000      R     MOV     DPTR,#status
0BBD 7403              MOV     A,#03H
0BBF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0BC0 7BFF              MOV     R3,#0FFH
0BC2 7A00        R     MOV     R2,#HIGH ?SC_0
0BC4 7900        R     MOV     R1,#LOW ?SC_0
0BC6 120000      E     LCALL   _UART_PutString
0BC9         ?C0164:
                                           ; SOURCE LINE # 530
0BC9 120000      E     LCALL   UART_ReadTxStatus
0BCC EF                MOV     A,R7
0BCD 30E103            JNB     ACC.1,$ + 6H
0BD0 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 533
0BD3 80F4              SJMP    ?C0164
0BD5         ?C0165:
                                           ; SOURCE LINE # 534
0BD5 020000      R     LJMP    ?C0180
0BD8         ?C0160:
                                           ; SOURCE LINE # 535
0BD8 900000      R     MOV     DPTR,#word
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 49  

0BDB E0                MOVX    A,@DPTR
0BDC FF                MOV     R7,A
0BDD EF                MOV     A,R7
0BDE 64DD              XRL     A,#0DDH
0BE0 7052              JNZ     ?C0167
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
0BE2 7BFF              MOV     R3,#0FFH
0BE4 7A00        R     MOV     R2,#HIGH ?SC_0
0BE6 7900        R     MOV     R1,#LOW ?SC_0
0BE8 120000      E     LCALL   _UART_PutString
0BEB         ?C0168:
                                           ; SOURCE LINE # 538
0BEB 120000      E     LCALL   UART_ReadTxStatus
0BEE EF                MOV     A,R7
0BEF 30E1F9            JNB     ACC.1,?C0168
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 541
0BF2         ?C0169:
                                           ; SOURCE LINE # 543
0BF2 900000      E     MOV     DPTR,#delay
0BF5 E0                MOVX    A,@DPTR
0BF6 FE                MOV     R6,A
0BF7 A3                INC     DPTR
0BF8 E0                MOVX    A,@DPTR
0BF9 FF                MOV     R7,A
0BFA EE                MOV     A,R6
0BFB FF                MOV     R7,A
0BFC 7E00              MOV     R6,#00H
0BFE 900000      R     MOV     DPTR,#d_msb
0C01 EF                MOV     A,R7
0C02 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
0C03 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 546
0C06 900000      R     MOV     DPTR,#d_msb
0C09 E0                MOVX    A,@DPTR
0C0A FF                MOV     R7,A
0C0B 120000      E     LCALL   _UART_WriteTxData
0C0E         ?C0170:
                                           ; SOURCE LINE # 547
0C0E 120000      E     LCALL   UART_ReadTxStatus
0C11 EF                MOV     A,R7
0C12 30E1F9            JNB     ACC.1,?C0170
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 550
0C15         ?C0171:
                                           ; SOURCE LINE # 552
0C15 900000      E     MOV     DPTR,#delay
0C18 E0                MOVX    A,@DPTR
0C19 FE                MOV     R6,A
0C1A A3                INC     DPTR
0C1B E0                MOVX    A,@DPTR
0C1C FF                MOV     R7,A
0C1D 120000      E     LCALL   _UART_WriteTxData
0C20         ?C0172:
                                           ; SOURCE LINE # 553
0C20 120000      E     LCALL   UART_ReadTxStatus
0C23 EF                MOV     A,R7
0C24 30E1F9            JNB     ACC.1,?C0172
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 556
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 50  

0C27         ?C0173:
                                           ; SOURCE LINE # 558
0C27 900000      R     MOV     DPTR,#cmd_exct
0C2A E4                CLR     A
0C2B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
0C2C 900000      R     MOV     DPTR,#dat_cnt
0C2F E4                CLR     A
0C30 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0C31 020000      R     LJMP    ?C0180
0C34         ?C0167:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
0C34 900000      E     MOV     DPTR,#i
0C37 E4                CLR     A
0C38 F0                MOVX    @DPTR,A
0C39         ?C0175:
0C39 900000      E     MOV     DPTR,#i
0C3C E0                MOVX    A,@DPTR
0C3D FF                MOV     R7,A
0C3E EF                MOV     A,R7
0C3F D3                SETB    C
0C40 941F              SUBB    A,#01FH
0C42 5019              JNC     ?C0176
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0C44 900000      E     MOV     DPTR,#i
0C47 E0                MOVX    A,@DPTR
0C48 FF                MOV     R7,A
0C49 7400        R     MOV     A,#LOW rx_word
0C4B 2F                ADD     A,R7
0C4C F582              MOV     DPL,A
0C4E E4                CLR     A
0C4F 3400        R     ADDC    A,#HIGH rx_word
0C51 F583              MOV     DPH,A
0C53 E4                CLR     A
0C54 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
0C55 900000      E     MOV     DPTR,#i
0C58 E0                MOVX    A,@DPTR
0C59 04                INC     A
0C5A F0                MOVX    @DPTR,A
0C5B 80DC              SJMP    ?C0175
0C5D         ?C0176:
                                           ; SOURCE LINE # 567
0C5D 900000      R     MOV     DPTR,#dat_cnt
0C60 E4                CLR     A
0C61 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
0C62 900000      R     MOV     DPTR,#cmd_exct
0C65 E4                CLR     A
0C66 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0C67 7BFF              MOV     R3,#0FFH
0C69 7A00        R     MOV     R2,#HIGH ?SC_9
0C6B 7900        R     MOV     R1,#LOW ?SC_9
0C6D 120000      E     LCALL   _UART_PutString
0C70         ?C0178:
                                           ; SOURCE LINE # 571
0C70 120000      E     LCALL   UART_ReadTxStatus
0C73 EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 51  

0C74 30E103            JNB     ACC.1,$ + 6H
0C77 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 574
0C7A 80F4              SJMP    ?C0178
0C7C         ?C0179:
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
0C7C 020000      R     LJMP    ?C0180
0C7F         ?C0003:
                                           ; SOURCE LINE # 577
0C7F 900000      R     MOV     DPTR,#dat_cnt
0C82 E0                MOVX    A,@DPTR
0C83 FF                MOV     R7,A
0C84 EF                MOV     A,R7
0C85 607C              JZ      ?C0180
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
0C87 900000      R     MOV     DPTR,#word
0C8A E0                MOVX    A,@DPTR
0C8B FF                MOV     R7,A
0C8C 900000      E     MOV     DPTR,#i
0C8F E0                MOVX    A,@DPTR
0C90 FE                MOV     R6,A
0C91 7400        R     MOV     A,#LOW rx_word
0C93 2E                ADD     A,R6
0C94 F582              MOV     DPL,A
0C96 E4                CLR     A
0C97 3400        R     ADDC    A,#HIGH rx_word
0C99 F583              MOV     DPH,A
0C9B EF                MOV     A,R7
0C9C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
0C9D 900000      E     MOV     DPTR,#i
0CA0 E0                MOVX    A,@DPTR
0CA1 04                INC     A
0CA2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0CA3 900000      R     MOV     DPTR,#dat_cnt
0CA6 E0                MOVX    A,@DPTR
0CA7 14                DEC     A
0CA8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0CA9 900000      R     MOV     DPTR,#dat_cnt
0CAC E0                MOVX    A,@DPTR
0CAD FF                MOV     R7,A
0CAE EF                MOV     A,R7
0CAF 704D              JNZ     ?C0182
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
0CB1 900000      R     MOV     DPTR,#cmd_exct
0CB4 7401              MOV     A,#01H
0CB6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0CB7 900000      R     MOV     DPTR,#rx_word
0CBA E0                MOVX    A,@DPTR
0CBB FF                MOV     R7,A
0CBC EF                MOV     A,R7
0CBD B4DE43            CJNE    A,#0DEH,?C0180
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
0CC0 900000      E     MOV     DPTR,#delay
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 52  

0CC3 E4                CLR     A
0CC4 F0                MOVX    @DPTR,A
0CC5 A3                INC     DPTR
0CC6 E4                CLR     A
0CC7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0CC8 900000      R     MOV     DPTR,#rx_word+01H
0CCB E0                MOVX    A,@DPTR
0CCC FF                MOV     R7,A
0CCD 7E00              MOV     R6,#00H
0CCF 900000      E     MOV     DPTR,#delay
0CD2 EE                MOV     A,R6
0CD3 8FF0              MOV     B,R7
0CD5 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 589
0CD8 900000      E     MOV     DPTR,#delay
0CDB E0                MOVX    A,@DPTR
0CDC FE                MOV     R6,A
0CDD A3                INC     DPTR
0CDE E0                MOVX    A,@DPTR
0CDF FF                MOV     R7,A
0CE0 EF                MOV     A,R7
0CE1 7F00              MOV     R7,#00H
0CE3 FE                MOV     R6,A
0CE4 900000      E     MOV     DPTR,#delay
0CE7 EE                MOV     A,R6
0CE8 F0                MOVX    @DPTR,A
0CE9 A3                INC     DPTR
0CEA EF                MOV     A,R7
0CEB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0CEC 900000      R     MOV     DPTR,#rx_word+02H
0CEF E0                MOVX    A,@DPTR
0CF0 FF                MOV     R7,A
0CF1 7E00              MOV     R6,#00H
0CF3 900000      E     MOV     DPTR,#delay
0CF6 EE                MOV     A,R6
0CF7 8FF0              MOV     B,R7
0CF9 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
0CFC 8005              SJMP    ?C0180
0CFE         ?C0182:
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
0CFE 900000      R     MOV     DPTR,#cmd_exct
0D01 E4                CLR     A
0D02 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
0D03         ?C0180:
                                           ; SOURCE LINE # 598
0D03 900000      R     MOV     DPTR,#cmd_exct
0D06 E0                MOVX    A,@DPTR
0D07 FF                MOV     R7,A
0D08 EF                MOV     A,R7
0D09 6401              XRL     A,#01H
0D0B 6003              JZ      $ + 5H
0D0D 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0D10 900000      E     MOV     DPTR,#i
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 53  

0D13 E0                MOVX    A,@DPTR
0D14 14                DEC     A
0D15 FF                MOV     R7,A
0D16 F0                MOVX    @DPTR,A
0D17 900000      R     MOV     DPTR,#lst_byte
0D1A EF                MOV     A,R7
0D1B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0D1C 900000      R     MOV     DPTR,#status
0D1F E0                MOVX    A,@DPTR
0D20 FF                MOV     R7,A
0D21 EF                MOV     A,R7
0D22 14                DEC     A
0D23 FF                MOV     R7,A
0D24 900000      R     MOV     DPTR,#cmd_set
0D27 EF                MOV     A,R7
0D28 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
0D29 900000      R     MOV     DPTR,#status
0D2C E0                MOVX    A,@DPTR
0D2D FF                MOV     R7,A
0D2E 900000      R     MOV     DPTR,#stat
0D31 EF                MOV     A,R7
0D32 F0                MOVX    @DPTR,A
0D33         ?C0186:
0D33 900000      R     MOV     DPTR,#stat
0D36 E0                MOVX    A,@DPTR
0D37 FF                MOV     R7,A
0D38 EF                MOV     A,R7
0D39 D3                SETB    C
0D3A 9400              SUBB    A,#00H
0D3C 4036              JC      ?C0187
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0D3E 900000      R     MOV     DPTR,#lst_byte
0D41 E0                MOVX    A,@DPTR
0D42 FF                MOV     R7,A
0D43 7400        R     MOV     A,#LOW rx_word
0D45 2F                ADD     A,R7
0D46 F582              MOV     DPL,A
0D48 E4                CLR     A
0D49 3400        R     ADDC    A,#HIGH rx_word
0D4B F583              MOV     DPH,A
0D4D E0                MOVX    A,@DPTR
0D4E FF                MOV     R7,A
0D4F 900000      R     MOV     DPTR,#cmd_set
0D52 E0                MOVX    A,@DPTR
0D53 FE                MOV     R6,A
0D54 7400        R     MOV     A,#LOW switch_cmd
0D56 2E                ADD     A,R6
0D57 F582              MOV     DPL,A
0D59 E4                CLR     A
0D5A 3400        R     ADDC    A,#HIGH switch_cmd
0D5C F583              MOV     DPH,A
0D5E EF                MOV     A,R7
0D5F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 606
0D60 900000      R     MOV     DPTR,#lst_byte
0D63 E0                MOVX    A,@DPTR
0D64 14                DEC     A
0D65 F0                MOVX    @DPTR,A
0D66 900000      R     MOV     DPTR,#cmd_set
C51 COMPILER V9.51   TASK2                                                                 06/30/2014 15:53:55 PAGE 54  

0D69 E0                MOVX    A,@DPTR
0D6A 14                DEC     A
0D6B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
0D6C 900000      R     MOV     DPTR,#stat
0D6F E0                MOVX    A,@DPTR
0D70 14                DEC     A
0D71 F0                MOVX    @DPTR,A
0D72 80BF              SJMP    ?C0186
0D74         ?C0187:
                                           ; SOURCE LINE # 609
0D74 900000      R     MOV     DPTR,#cmd_exct
0D77 E4                CLR     A
0D78 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
0D79 7F01              MOV     R7,#01H
0D7B 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 611
0D7E 900000      E     MOV     DPTR,#i
0D81 E0                MOVX    A,@DPTR
0D82 04                INC     A
0D83 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0D84 020000      R     LJMP    ?C0001
0D87 22                RET     
             ; FUNCTION task2 (END)

             ; FUNCTION TASK_2 (BEGIN)
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0000 7F02              MOV     R7,#02H
0002 120000      E     LCALL   _os_create_task
                                           ; SOURCE LINE # 619
0005 22                RET     
             ; FUNCTION TASK_2 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3470    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     44       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
