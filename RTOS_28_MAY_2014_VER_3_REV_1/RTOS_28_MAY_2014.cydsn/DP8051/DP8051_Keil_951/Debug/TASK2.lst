C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TASK2
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\TASK2.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\TASK
                    -2.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\TASK2.lst) CD DB NOIP OT(2,SIZE) INCDIR(.,.\Generated
                    -_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\TASK2.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright QMAX, 2012
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF QMAX.
   9           *
  10           * ========================================
  11          */
  12          #include "TASK1.h"
  13          #include "TASK2.h"
  14          #include "TASK3.h"
  15          
  16          unsigned char switch_cmd[8],rx_word[32],k_port,k_val,d_msb,prb_sts;
  17          
  18          void task2 (void) _task_ 2
  19          {
  20   1              unsigned char word,dat_cnt = 0,cmd_exct = 0,lst_byte=0,cmd_set,stat,status,pos = 0;
  21   1      
  22   1              for(;;)
  23   1              {
  24   2                      os_wait1(K_SIG);                                                        //      Wait for signal from UART_ISR
  25   2                      
  26   2                      word    = UART_ReadRxData();
  27   2              
  28   2                      if(dat_cnt == 0)
  29   2                      {
  30   3                              if(word == 0xFF)                                                //      Software Reset Command
  31   3                              {
  32   4                                      i=0;
  33   4                                      rx_word[i]      = word;
  34   4                                      i++;
  35   4                                      dat_cnt         = 1;
  36   4                                      status          = 2;
  37   4                                      
  38   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
  39   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  40   4                                      {
  41   5                                              ;
  42   5                                      }
  43   4                              }
  44   3                              else if(word == 0x00)                                   //      Check Busy Status
  45   3                              {
  46   4                                      UART_ClearTxBuffer();
  47   4      
  48   4                                      cmd_exct        = 0;
  49   4                                      dat_cnt         = 0;
  50   4                              }
  51   3                              else if(word == 0x01)                                   //      Embedded Probe Key
  52   3                              {
  53   4                      k_val=0x00;
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 2   

  54   4                                      if(CyPins_ReadPin(K1_SENSE_P0_3))        k_val = k_val & 0xF7;
  55   4                      else                                     k_val = k_val & 0x08;
  56   4                      
  57   4                      if(CyPins_ReadPin(K2_SENSE_P4_1))        k_val = k_val | 0x7F;
  58   4                      else                                     k_val = k_val & 0x80;
  59   4                      
  60   4                      CyDelayUs(1000);
  61   4                      
  62   4                                      UART_PutString("*");                    //      STATUS ACKNOWLEDGEMENT to uP    //
  63   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  64   4                                      {
  65   5                                              ;
  66   5                                      }
  67   4                              
  68   4                                      UART_PutString("*");
  69   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  70   4                                      {
  71   5                                              ;
  72   5                                      }
  73   4                              
  74   4                                      UART_PutString("*");
  75   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  76   4                                      {
  77   5                                              ;
  78   5                                      }
  79   4                              
  80   4                                      UART_PutString("#");
  81   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  82   4                                      {
  83   5                                              ;
  84   5                                      }
  85   4                                      
  86   4                                      UART_WriteTxData(k_val);
  87   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  88   4                                      {
  89   5                                              ;
  90   5                                      }
  91   4                                      k_val           = 0;
  92   4                                      cmd_exct        = 0;
  93   4                                      dat_cnt         = 0;
  94   4                              }
  95   3                              else if(word == 0xF1)                                   //      VI 1 
  96   3                              {
  97   4                                      for(i=0; i<=8; i++)
  98   4                                      {
  99   5                                              rx_word[i]      = 0x00;
 100   5                                      }
 101   4                                      i=0;
 102   4                                      rx_word[i]      = word;
 103   4                                      switch_cmd[0] = rx_word[i];
 104   4                                      os_send_signal(1);
 105   4                                      
 106   4                                      cmd_exct        = 0;
 107   4                                      dat_cnt         = 0;
 108   4                                      
 109   4                              }
 110   3      
 111   3      
 112   3                              else if(word == 0xF2)                                   //      VI 2 changed to single Byte CMD on 23 NOV 2012 11:26 AM
 113   3                              {
 114   4                                      for(i=0; i<=8; i++)
 115   4                                      {
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 3   

 116   5                                              rx_word[i]      = 0x00;
 117   5                                      }
 118   4                                      i=0;
 119   4                                      rx_word[i]      = word;
 120   4                                      switch_cmd[0] = rx_word[i];
 121   4                                      os_send_signal(1);
 122   4                                      
 123   4                                      cmd_exct        = 0;
 124   4                                      dat_cnt         = 0;
 125   4                                      
 126   4                              }
 127   3                              else if(word == 0x03)                                   //      ICM Select
 128   3                              {
 129   4                                      for(i=0; i<=8; i++)
 130   4                                      {
 131   5                                              rx_word[i]      = 0x00;
 132   5                                      }
 133   4                                      i=0;
 134   4                                      rx_word[i]      = word;
 135   4                                      switch_cmd[0] = rx_word[i];
 136   4                                      os_send_signal(1);
 137   4                                      
 138   4                                      cmd_exct        = 0;
 139   4                                      dat_cnt         = 0;
 140   4                                      
 141   4                              }
 142   3                  else if(word == 0xFC)                                       //      Switch fly channel
 143   3                              {
 144   4                                      for(i=0; i<=8; i++)
 145   4                                      {
 146   5                                              rx_word[i]      = 0x00;
 147   5                                      }
 148   4                                      i=0;
 149   4                                      rx_word[i]      = word;
 150   4                                      switch_cmd[0] = rx_word[i];
 151   4                                      os_send_signal(1);
 152   4                                      
 153   4                                      cmd_exct        = 0;
 154   4                                      dat_cnt         = 0;
 155   4                                      
 156   4                              }
 157   3                              else if(word == 0x06)                                   //      Function Generator
 158   3                              {
 159   4                                      for(i=0; i<=8; i++)
 160   4                                      {
 161   5                                              rx_word[i]      = 0x00;
 162   5                                      }
 163   4                                      i=0;
 164   4                                      rx_word[i]      = word;
 165   4                                      switch_cmd[0] = rx_word[i];
 166   4                                      os_send_signal(1);
 167   4                                      
 168   4                                      cmd_exct        = 0;
 169   4                                      dat_cnt         = 0;
 170   4                                      
 171   4                              }
 172   3                              else if(word == 0x08)                                   //      CodeID Read
 173   3                              {
 174   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 175   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 176   4                                      {
 177   5                                              ;
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 4   

 178   5                                      }
 179   4      
 180   4                                      UART_ClearTxBuffer();
 181   4                                      UART_WriteTxData(Code_ID);
 182   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 183   4                                      {
 184   5                                              ;
 185   5                                      }
 186   4                                      cmd_exct        = 0;
 187   4                                      dat_cnt         = 0;
 188   4      
 189   4                              }
 190   3                              else if(word == 0xD0)                                   //      DEVICE VERSION & REVISION READ
 191   3                              {                                                                               //      CHANGE OF REV or VER TO BE MADE IN TASK1 HEADER FILE
 192   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 193   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 194   4                                      {
 195   5                                              ;
 196   5                                      }
 197   4      
 198   4                                      UART_ClearTxBuffer();
 199   4                                      UART_WriteTxData(VERSION);              //      VERSION OF THE CODE
 200   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 201   4                                      {
 202   5                                              ;
 203   5                                      }
 204   4                                      UART_WriteTxData(REVISION);             //      REVISION OF THE CODE
 205   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 206   4                                      {
 207   5                                              ;
 208   5                                      }
 209   4                                      cmd_exct        = 0;
 210   4                                      dat_cnt         = 0;
 211   4                              }
 212   3                              else if(word == 0x09)                                   //      External Mux I/F
 213   3                              {
 214   4                                      i=0;
 215   4                                      rx_word[i]      = word;
 216   4                                      i++;
 217   4                                      dat_cnt         = 2;
 218   4                                      status          = 3;
 219   4                                      
 220   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 221   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 222   4                                      {
 223   5                                              ;
 224   5                                      }
 225   4                              }
 226   3                              else if(word == 0x0A)                                   //      External Mux Detect
 227   3                              {
 228   4                                      i=0;
 229   4                                      rx_word[i]      = word;
 230   4                                      switch_cmd[0] = rx_word[i];
 231   4                                      os_send_signal(1);
 232   4                                      
 233   4                                      cmd_exct        = 0;
 234   4                                      dat_cnt         = 0;
 235   4      
 236   4                              }
 237   3                              else if(word == 0x0B)                                   //      EX-MUX TEST Chnl ON
 238   3                              {
 239   4                                      i=0;
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 5   

 240   4                                      rx_word[i]      = word;
 241   4                                      i++;
 242   4                                      dat_cnt         = 1;
 243   4                                      status          = 2;
 244   4                                      
 245   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 246   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 247   4                                      {
 248   5                                              ;
 249   5                                      }
 250   4                              }
 251   3                              else if(word == 0x0C)                                   //      EX-MUX REF Chnl ON
 252   3                              {
 253   4                                      i=0;
 254   4                                      rx_word[i]      = word;
 255   4                                      i++;
 256   4                                      dat_cnt         = 1;
 257   4                                      status          = 2;
 258   4                                      
 259   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 260   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 261   4                                      {
 262   5                                              ;
 263   5                                      }
 264   4                              }
 265   3                              else if(word == 0x10)                                   //       PWM START
 266   3                              {
 267   4                                      for(i=0; i<=8; i++)
 268   4                                      {
 269   5                                              rx_word[i]      = 0x00;
 270   5                                      }
 271   4                                      i=0;
 272   4                                      rx_word[i]      = word;
 273   4                                      switch_cmd[0] = rx_word[i];
 274   4                                      os_send_signal(1);
 275   4                                      
 276   4                                      cmd_exct        = 0;
 277   4                                      dat_cnt         = 0;
 278   4      
 279   4                              }
 280   3                              else if(word == 0x11)                                   //       PWM STOP
 281   3                              {
 282   4                                      for(i=0; i<=8; i++)
 283   4                                      {
 284   5                                              rx_word[i]      = 0x00;
 285   5                                      }
 286   4                                      i=0;
 287   4                                      rx_word[i]      = word;
 288   4                                      switch_cmd[0] = rx_word[i];
 289   4                                      os_send_signal(1);
 290   4                                      
 291   4                                      cmd_exct        = 0;
 292   4                                      dat_cnt         = 0;
 293   4      
 294   4                              }
 295   3                              else if(word == 0x18)                                   //      Embedded Probe Status
 296   3                              {
 297   4                                      //prb_sts = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);          //Port0 Read
 298   4                                      //prb_sts = ~prb_sts;                                                                   //Invert Port0 Data
 299   4                                      //prb_sts = prb_sts & 0x88;                                                     //Mask the Key Pin Input from Port0 Data
 300   4                                      //prb_sts = prb_sts >> 3;
 301   4                                      
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 6   

 302   4                                      UART_PutString("*");                    //      STATUS ACKNOWLEDGEMENT to uP    //
 303   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 304   4                                      {
 305   5                                              ;
 306   5                                      }
 307   4                                      
 308   4                                      UART_PutString("*");
 309   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 310   4                                      {
 311   5                                              ;
 312   5                                      }
 313   4                              
 314   4                                      UART_PutString("*");
 315   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 316   4                                      {
 317   5                                              ;
 318   5                                      }
 319   4                              
 320   4                                      UART_PutString("#");
 321   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 322   4                                      {
 323   5                                              ;
 324   5                                      }
 325   4                                      
 326   4                                      UART_WriteTxData(prb_sts);
 327   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 328   4                                      {
 329   5                                              ;
 330   5                                      }
 331   4                              
 332   4                                      cmd_exct        = 0;
 333   4                                      dat_cnt         = 0;
 334   4                              }
 335   3                              else if(word == 0x1C)                                   //      Interrupt Pin Configuration
 336   3                              {
 337   4                                      i=0;
 338   4                                      rx_word[i]      = word;
 339   4                                      i++;
 340   4                                      dat_cnt         = 1;
 341   4                                      status          = 2;
 342   4                                      
 343   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 344   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 345   4                                      {
 346   5                                              ;
 347   5                                      }
 348   4                              }
 349   3                              else if(word == 0x40)                                   //      Debug Mode
 350   3                              {
 351   4                                      for(i=0; i<=8; i++)
 352   4                                      {
 353   5                                              rx_word[i]      = 0x00;
 354   5                                      }
 355   4                                      i=0;
 356   4                                      rx_word[i]      = word;
 357   4                                      switch_cmd[0] = rx_word[i];
 358   4                                      os_send_signal(1);
 359   4                                      
 360   4                                      cmd_exct        = 0;
 361   4                                      dat_cnt         = 0;
 362   4                                      
 363   4                              }
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 7   

 364   3                              else if(word == 0x45)                                   //      Port Status Read
 365   3                              {
 366   4                                      for(i=0; i<=8; i++)
 367   4                                      {
 368   5                                              rx_word[i]      = 0x00;
 369   5                                      }
 370   4                                      i = 0;
 371   4                                      rx_word[i]      = word;
 372   4                                      switch_cmd[0] = rx_word[i];
 373   4                                      os_send_signal(1);
 374   4                                      
 375   4                                      cmd_exct        = 0;
 376   4                                      dat_cnt         = 0;
 377   4                                      
 378   4                              }
 379   3                              else if(word == 0x46){                                  //      SRC IMP Status Read
 380   4                                      for(i=0; i<=8; i++)
 381   4                                      {
 382   5                                              rx_word[i]      = 0x00;
 383   5                                      }
 384   4                                      i = 0;
 385   4                                      rx_word[i]      = word;
 386   4                                      switch_cmd[0] = rx_word[i];
 387   4                                      os_send_signal(1);
 388   4                      
 389   4                                      cmd_exct        = 0;
 390   4                                      dat_cnt         = 0;
 391   4                                      
 392   4                              }                       
 393   3                              else if(word == 0x47)                                   //      SRC IMP ENABLE
 394   3                              {
 395   4                                      for(i=0; i<=8; i++)
 396   4                                      {
 397   5                                              rx_word[i]      = 0x00;
 398   5                                      }
 399   4                                      i=0;
 400   4                                      rx_word[i]      = word;
 401   4                                      switch_cmd[0] = rx_word[i];
 402   4                                      os_send_signal(1);
 403   4                                      
 404   4                                      cmd_exct        = 0;
 405   4                                      dat_cnt         = 0;
 406   4                                      
 407   4                              }            
 408   3                              else if(word == 0x48)                                   //      SRC IMP DISABLE
 409   3                              {
 410   4                                      for(i=0; i<=8; i++)
 411   4                                      {
 412   5                                              rx_word[i]      = 0x00;
 413   5                                      }
 414   4                                      i=0;
 415   4                                      rx_word[i]      = word;
 416   4                                      switch_cmd[0] = rx_word[i];
 417   4                                      os_send_signal(1);
 418   4                                      
 419   4                                      cmd_exct        = 0;
 420   4                                      dat_cnt         = 0;
 421   4                                      
 422   4                              }                        
 423   3                              else if(word == 0x50)                                   //      BAUD RATE CHANGE
 424   3                              {
 425   4                                      i=0;
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 8   

 426   4                                      rx_word[i]      = word;
 427   4                                      i++;
 428   4                                      dat_cnt         = 1;
 429   4                                      status          = 2;
 430   4                                      
 431   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 432   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 433   4                                      {
 434   5                                              ;
 435   5                                      }
 436   4                              }
 437   3                  else if(word == 0x51)                                       //      SRC IMP SELECTION
 438   3                              {
 439   4                                      i=0;
 440   4                                      rx_word[i]      = word;
 441   4                                      i++;
 442   4                                      dat_cnt         = 1;
 443   4                                      status          = 2;
 444   4                                      
 445   4                                      UART_ClearRxBuffer();
 446   4                      UART_ClearTxBuffer();                
 447   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 448   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 449   4                      {
 450   5                          ;
 451   5                      }
 452   4                     UART_ClearTxBuffer();   
 453   4                              }                       
 454   3                              else if(word == 0x55)                                   //      Loop Check
 455   3                              {
 456   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 457   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 458   4                                      {
 459   5                                              ;
 460   5                                      }
 461   4                                      
 462   4                                      UART_ClearTxBuffer();
 463   4                                      UART_WriteTxData(word);
 464   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 465   4                                      {
 466   5                                              ;
 467   5                                      }
 468   4                                      cmd_exct        = 0;
 469   4                                      dat_cnt         = 0;
 470   4                              }
 471   3                              else if(word == 0x0D)                                   //      Print Stored Values
 472   3                              {
 473   4                                      cmd_exct        = 0;
 474   4                                      dat_cnt         = 0;
 475   4                                      prnt_en         = 1;
 476   4                                      
 477   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 478   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 479   4                                      {
 480   5                                              ;
 481   5                                      }
 482   4                                      
 483   4                                      os_send_signal(1);                                      //      Send signal to TASK1 for execution
 484   4                              }
 485   3                              else if(word == 0xDE)                                   //      PROGRAMMABLE DELAY
 486   3                              {
 487   4                                      for(i=0; i<=8; i++)
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 9   

 488   4                                      {
 489   5                                              rx_word[i]      = 0x00;
 490   5                                      }
 491   4                                      i=0;
 492   4                                      rx_word[i]      = word;
 493   4                                      i++;
 494   4                                      dat_cnt         = 2;
 495   4                                      status          = 3;
 496   4                                      
 497   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 498   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 499   4                                      {
 500   5                                              ;
 501   5                                      }
 502   4                              }
 503   3                              else if(word == 0xDD)                                   //      PROGRAMABLE DELAY VALUE READ BACK
 504   3                              {
 505   4                                      UART_PutString("***#");                 //      STATUS ACKNOWLEDGEMENT to uP    //
 506   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 507   4                                      {
 508   5                                              ;
 509   5                                      }
 510   4                                      
 511   4                                      d_msb = delay >> 8;
 512   4                                      
 513   4                                      UART_ClearTxBuffer();
 514   4                                      UART_WriteTxData(d_msb);
 515   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 516   4                                      {
 517   5                                              ;
 518   5                                      }
 519   4      
 520   4                                      UART_WriteTxData(delay);
 521   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 522   4                                      {
 523   5                                              ;
 524   5                                      }
 525   4                                      
 526   4                                      cmd_exct        = 0;
 527   4                                      dat_cnt         = 0;
 528   4                              }
 529   3                              else
 530   3                              {
 531   4                                      for(i = 0; i <= 31; i++)
 532   4                                      {
 533   5                                              rx_word[i]      = 0x00;
 534   5                                      }
 535   4                                      dat_cnt         = 0;
 536   4                                      cmd_exct        = 0;
 537   4                                      
 538   4                                      UART_PutString("***?");
 539   4                                      while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
 540   4                                      {
 541   5                                              ;
 542   5                                      }
 543   4                              }
 544   3                      }
 545   2                      else if(dat_cnt)
 546   2                      {
 547   3                              rx_word[i]      = word;
 548   3                              i++;
 549   3                              dat_cnt--;
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 10  

 550   3                              if(dat_cnt == 0)
 551   3                              {
 552   4                                      cmd_exct = 1;
 553   4                                      if(rx_word[0] == 0xDE)
 554   4                                      {
 555   5                                              delay = 0;
 556   5                                              delay = delay + rx_word[1];
 557   5                                              delay = delay << 8;
 558   5                                              delay = delay + rx_word[2];
 559   5                                      }
 560   4                              }
 561   3                              else
 562   3                              {
 563   4                                      cmd_exct = 0;
 564   4                              }
 565   3                      }
 566   2                      if(cmd_exct == 1)
 567   2                      {
 568   3                              lst_byte = --i;
 569   3                              cmd_set = status-1;
 570   3                                      
 571   3                              for(stat = status; stat > 0; stat--)
 572   3                              {
 573   4                                      switch_cmd[cmd_set] = rx_word[lst_byte];
 574   4                                      lst_byte--;cmd_set--;
 575   4                              }
 576   3                              
 577   3                              cmd_exct = 0;
 578   3                      os_send_signal(1);                                              //      Send signal to TASK1 for execution
 579   3                              ++i;
 580   3                      }
 581   2              }
 582   1      }
 583          
 584          void TASK_2 ()                                                                          //      INITIALISATION FUNCTION OF TASK2
 585          {
 586   1              os_create_task(2);                                                              //      CREATION OF TASK2
 587   1      }
 588          
 589          /* [] END OF FILE */
*** WARNING C316 IN LINE 589 OF .\TASK2.c: unterminated conditionals
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task2 (BEGIN)
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 20
0000 900000      R     MOV     DPTR,#dat_cnt
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#cmd_exct
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#lst_byte
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
000F 900000      R     MOV     DPTR,#pos
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0014         ?C0001:
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _os_wait1
                                           ; SOURCE LINE # 26
0019 120000      E     LCALL   UART_ReadRxData
001C 900000      R     MOV     DPTR,#word
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
0021 900000      R     MOV     DPTR,#dat_cnt
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 6003              JZ      $ + 5H
0029 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
002C 900000      R     MOV     DPTR,#word
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 64FF              XRL     A,#0FFH
0034 7045              JNZ     ?C0004
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
0036 900000      E     MOV     DPTR,#i
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
003B 900000      R     MOV     DPTR,#word
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      E     MOV     DPTR,#i
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 7400        R     MOV     A,#LOW rx_word
0047 2E                ADD     A,R6
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH rx_word
004D F583              MOV     DPH,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 12  

004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0051 900000      E     MOV     DPTR,#i
0054 E0                MOVX    A,@DPTR
0055 04                INC     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
0057 900000      R     MOV     DPTR,#dat_cnt
005A 7401              MOV     A,#01H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
005D 900000      R     MOV     DPTR,#status
0060 7402              MOV     A,#02H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0063 7BFF              MOV     R3,#0FFH
0065 7A00        R     MOV     R2,#HIGH ?SC_0
0067 7900        R     MOV     R1,#LOW ?SC_0
0069 120000      E     LCALL   _UART_PutString
006C         ?C0005:
                                           ; SOURCE LINE # 39
006C 120000      E     LCALL   UART_ReadTxStatus
006F EF                MOV     A,R7
0070 30E103            JNB     ACC.1,$ + 6H
0073 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 42
0076 80F4              SJMP    ?C0005
0078         ?C0006:
                                           ; SOURCE LINE # 43
0078 020000      R     LJMP    ?C0168
007B         ?C0004:
                                           ; SOURCE LINE # 44
007B 900000      R     MOV     DPTR,#word
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 7010              JNZ     ?C0008
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0083 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 48
0086 900000      R     MOV     DPTR,#cmd_exct
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
008B 900000      R     MOV     DPTR,#dat_cnt
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0090 020000      R     LJMP    ?C0168
0093         ?C0008:
                                           ; SOURCE LINE # 51
0093 900000      R     MOV     DPTR,#word
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 6401              XRL     A,#01H
009B 6003              JZ      $ + 5H
009D 020000      R     LJMP    ?C0010
                                           ; SOURCE LINE # 52
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 13  

                                           ; SOURCE LINE # 53
00A0 900000      R     MOV     DPTR,#k_val
00A3 E4                CLR     A
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
00A5 905003            MOV     DPTR,#05003H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 30E410            JNB     ACC.4,?C0011
00AE 900000      R     MOV     DPTR,#k_val
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 54F7              ANL     A,#0F7H
00B6 FF                MOV     R7,A
00B7 900000      R     MOV     DPTR,#k_val
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
00BC 800E              SJMP    ?C0012
00BE         ?C0011:
                                           ; SOURCE LINE # 55
00BE 900000      R     MOV     DPTR,#k_val
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 5408              ANL     A,#08H
00C6 FF                MOV     R7,A
00C7 900000      R     MOV     DPTR,#k_val
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
00CC         ?C0012:
                                           ; SOURCE LINE # 57
00CC 905021            MOV     DPTR,#05021H
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 EF                MOV     A,R7
00D2 30E410            JNB     ACC.4,?C0013
00D5 900000      R     MOV     DPTR,#k_val
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA EF                MOV     A,R7
00DB 447F              ORL     A,#07FH
00DD FF                MOV     R7,A
00DE 900000      R     MOV     DPTR,#k_val
00E1 EF                MOV     A,R7
00E2 F0                MOVX    @DPTR,A
00E3 800E              SJMP    ?C0014
00E5         ?C0013:
                                           ; SOURCE LINE # 58
00E5 900000      R     MOV     DPTR,#k_val
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA EF                MOV     A,R7
00EB 5480              ANL     A,#080H
00ED FF                MOV     R7,A
00EE 900000      R     MOV     DPTR,#k_val
00F1 EF                MOV     A,R7
00F2 F0                MOVX    @DPTR,A
00F3         ?C0014:
                                           ; SOURCE LINE # 60
00F3 7FE8              MOV     R7,#0E8H
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 14  

00F5 7E03              MOV     R6,#03H
00F7 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 62
00FA 7BFF              MOV     R3,#0FFH
00FC 7A00        R     MOV     R2,#HIGH ?SC_5
00FE 7900        R     MOV     R1,#LOW ?SC_5
0100 120000      E     LCALL   _UART_PutString
0103         ?C0015:
                                           ; SOURCE LINE # 63
0103 120000      E     LCALL   UART_ReadTxStatus
0106 EF                MOV     A,R7
0107 30E1F9            JNB     ACC.1,?C0015
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 66
010A         ?C0016:
                                           ; SOURCE LINE # 68
010A 7BFF              MOV     R3,#0FFH
010C 7A00        R     MOV     R2,#HIGH ?SC_5
010E 7900        R     MOV     R1,#LOW ?SC_5
0110 120000      E     LCALL   _UART_PutString
0113         ?C0017:
                                           ; SOURCE LINE # 69
0113 120000      E     LCALL   UART_ReadTxStatus
0116 EF                MOV     A,R7
0117 30E1F9            JNB     ACC.1,?C0017
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 72
011A         ?C0018:
                                           ; SOURCE LINE # 74
011A 7BFF              MOV     R3,#0FFH
011C 7A00        R     MOV     R2,#HIGH ?SC_5
011E 7900        R     MOV     R1,#LOW ?SC_5
0120 120000      E     LCALL   _UART_PutString
0123         ?C0019:
                                           ; SOURCE LINE # 75
0123 120000      E     LCALL   UART_ReadTxStatus
0126 EF                MOV     A,R7
0127 30E1F9            JNB     ACC.1,?C0019
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
012A         ?C0020:
                                           ; SOURCE LINE # 80
012A 7BFF              MOV     R3,#0FFH
012C 7A00        R     MOV     R2,#HIGH ?SC_7
012E 7900        R     MOV     R1,#LOW ?SC_7
0130 120000      E     LCALL   _UART_PutString
0133         ?C0021:
                                           ; SOURCE LINE # 81
0133 120000      E     LCALL   UART_ReadTxStatus
0136 EF                MOV     A,R7
0137 30E1F9            JNB     ACC.1,?C0021
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 84
013A         ?C0022:
                                           ; SOURCE LINE # 86
013A 900000      R     MOV     DPTR,#k_val
013D E0                MOVX    A,@DPTR
013E FF                MOV     R7,A
013F 120000      E     LCALL   _UART_WriteTxData
0142         ?C0023:
                                           ; SOURCE LINE # 87
0142 120000      E     LCALL   UART_ReadTxStatus
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 15  

0145 EF                MOV     A,R7
0146 30E1F9            JNB     ACC.1,?C0023
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 90
0149         ?C0024:
                                           ; SOURCE LINE # 91
0149 900000      R     MOV     DPTR,#k_val
014C E4                CLR     A
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
014E 900000      R     MOV     DPTR,#cmd_exct
0151 E4                CLR     A
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0153 900000      R     MOV     DPTR,#dat_cnt
0156 E4                CLR     A
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0158 020000      R     LJMP    ?C0168
015B         ?C0010:
                                           ; SOURCE LINE # 95
015B 900000      R     MOV     DPTR,#word
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 EF                MOV     A,R7
0161 64F1              XRL     A,#0F1H
0163 706C              JNZ     ?C0026
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
0165 900000      E     MOV     DPTR,#i
0168 E4                CLR     A
0169 F0                MOVX    @DPTR,A
016A         ?C0027:
016A 900000      E     MOV     DPTR,#i
016D E0                MOVX    A,@DPTR
016E FF                MOV     R7,A
016F EF                MOV     A,R7
0170 D3                SETB    C
0171 9408              SUBB    A,#08H
0173 5019              JNC     ?C0028
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0175 900000      E     MOV     DPTR,#i
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 7400        R     MOV     A,#LOW rx_word
017C 2F                ADD     A,R7
017D F582              MOV     DPL,A
017F E4                CLR     A
0180 3400        R     ADDC    A,#HIGH rx_word
0182 F583              MOV     DPH,A
0184 E4                CLR     A
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
0186 900000      E     MOV     DPTR,#i
0189 E0                MOVX    A,@DPTR
018A 04                INC     A
018B F0                MOVX    @DPTR,A
018C 80DC              SJMP    ?C0027
018E         ?C0028:
                                           ; SOURCE LINE # 101
018E 900000      E     MOV     DPTR,#i
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 16  

0191 E4                CLR     A
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0193 900000      R     MOV     DPTR,#word
0196 E0                MOVX    A,@DPTR
0197 FF                MOV     R7,A
0198 900000      E     MOV     DPTR,#i
019B E0                MOVX    A,@DPTR
019C FE                MOV     R6,A
019D 7400        R     MOV     A,#LOW rx_word
019F 2E                ADD     A,R6
01A0 F582              MOV     DPL,A
01A2 E4                CLR     A
01A3 3400        R     ADDC    A,#HIGH rx_word
01A5 F583              MOV     DPH,A
01A7 EF                MOV     A,R7
01A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
01A9 900000      E     MOV     DPTR,#i
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE 7400        R     MOV     A,#LOW rx_word
01B0 2F                ADD     A,R7
01B1 F582              MOV     DPL,A
01B3 E4                CLR     A
01B4 3400        R     ADDC    A,#HIGH rx_word
01B6 F583              MOV     DPH,A
01B8 E0                MOVX    A,@DPTR
01B9 FF                MOV     R7,A
01BA 900000      R     MOV     DPTR,#switch_cmd
01BD EF                MOV     A,R7
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
01BF 7F01              MOV     R7,#01H
01C1 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 106
01C4 900000      R     MOV     DPTR,#cmd_exct
01C7 E4                CLR     A
01C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
01C9 900000      R     MOV     DPTR,#dat_cnt
01CC E4                CLR     A
01CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
01CE 020000      R     LJMP    ?C0168
01D1         ?C0026:
                                           ; SOURCE LINE # 112
01D1 900000      R     MOV     DPTR,#word
01D4 E0                MOVX    A,@DPTR
01D5 FF                MOV     R7,A
01D6 EF                MOV     A,R7
01D7 64F2              XRL     A,#0F2H
01D9 706C              JNZ     ?C0031
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
01DB 900000      E     MOV     DPTR,#i
01DE E4                CLR     A
01DF F0                MOVX    @DPTR,A
01E0         ?C0032:
01E0 900000      E     MOV     DPTR,#i
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 17  

01E5 EF                MOV     A,R7
01E6 D3                SETB    C
01E7 9408              SUBB    A,#08H
01E9 5019              JNC     ?C0033
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
01EB 900000      E     MOV     DPTR,#i
01EE E0                MOVX    A,@DPTR
01EF FF                MOV     R7,A
01F0 7400        R     MOV     A,#LOW rx_word
01F2 2F                ADD     A,R7
01F3 F582              MOV     DPL,A
01F5 E4                CLR     A
01F6 3400        R     ADDC    A,#HIGH rx_word
01F8 F583              MOV     DPH,A
01FA E4                CLR     A
01FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
01FC 900000      E     MOV     DPTR,#i
01FF E0                MOVX    A,@DPTR
0200 04                INC     A
0201 F0                MOVX    @DPTR,A
0202 80DC              SJMP    ?C0032
0204         ?C0033:
                                           ; SOURCE LINE # 118
0204 900000      E     MOV     DPTR,#i
0207 E4                CLR     A
0208 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0209 900000      R     MOV     DPTR,#word
020C E0                MOVX    A,@DPTR
020D FF                MOV     R7,A
020E 900000      E     MOV     DPTR,#i
0211 E0                MOVX    A,@DPTR
0212 FE                MOV     R6,A
0213 7400        R     MOV     A,#LOW rx_word
0215 2E                ADD     A,R6
0216 F582              MOV     DPL,A
0218 E4                CLR     A
0219 3400        R     ADDC    A,#HIGH rx_word
021B F583              MOV     DPH,A
021D EF                MOV     A,R7
021E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
021F 900000      E     MOV     DPTR,#i
0222 E0                MOVX    A,@DPTR
0223 FF                MOV     R7,A
0224 7400        R     MOV     A,#LOW rx_word
0226 2F                ADD     A,R7
0227 F582              MOV     DPL,A
0229 E4                CLR     A
022A 3400        R     ADDC    A,#HIGH rx_word
022C F583              MOV     DPH,A
022E E0                MOVX    A,@DPTR
022F FF                MOV     R7,A
0230 900000      R     MOV     DPTR,#switch_cmd
0233 EF                MOV     A,R7
0234 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0235 7F01              MOV     R7,#01H
0237 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 123
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 18  

023A 900000      R     MOV     DPTR,#cmd_exct
023D E4                CLR     A
023E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
023F 900000      R     MOV     DPTR,#dat_cnt
0242 E4                CLR     A
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0244 020000      R     LJMP    ?C0168
0247         ?C0031:
                                           ; SOURCE LINE # 127
0247 900000      R     MOV     DPTR,#word
024A E0                MOVX    A,@DPTR
024B FF                MOV     R7,A
024C EF                MOV     A,R7
024D 6403              XRL     A,#03H
024F 706C              JNZ     ?C0036
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0251 900000      E     MOV     DPTR,#i
0254 E4                CLR     A
0255 F0                MOVX    @DPTR,A
0256         ?C0037:
0256 900000      E     MOV     DPTR,#i
0259 E0                MOVX    A,@DPTR
025A FF                MOV     R7,A
025B EF                MOV     A,R7
025C D3                SETB    C
025D 9408              SUBB    A,#08H
025F 5019              JNC     ?C0038
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0261 900000      E     MOV     DPTR,#i
0264 E0                MOVX    A,@DPTR
0265 FF                MOV     R7,A
0266 7400        R     MOV     A,#LOW rx_word
0268 2F                ADD     A,R7
0269 F582              MOV     DPL,A
026B E4                CLR     A
026C 3400        R     ADDC    A,#HIGH rx_word
026E F583              MOV     DPH,A
0270 E4                CLR     A
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0272 900000      E     MOV     DPTR,#i
0275 E0                MOVX    A,@DPTR
0276 04                INC     A
0277 F0                MOVX    @DPTR,A
0278 80DC              SJMP    ?C0037
027A         ?C0038:
                                           ; SOURCE LINE # 133
027A 900000      E     MOV     DPTR,#i
027D E4                CLR     A
027E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
027F 900000      R     MOV     DPTR,#word
0282 E0                MOVX    A,@DPTR
0283 FF                MOV     R7,A
0284 900000      E     MOV     DPTR,#i
0287 E0                MOVX    A,@DPTR
0288 FE                MOV     R6,A
0289 7400        R     MOV     A,#LOW rx_word
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 19  

028B 2E                ADD     A,R6
028C F582              MOV     DPL,A
028E E4                CLR     A
028F 3400        R     ADDC    A,#HIGH rx_word
0291 F583              MOV     DPH,A
0293 EF                MOV     A,R7
0294 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0295 900000      E     MOV     DPTR,#i
0298 E0                MOVX    A,@DPTR
0299 FF                MOV     R7,A
029A 7400        R     MOV     A,#LOW rx_word
029C 2F                ADD     A,R7
029D F582              MOV     DPL,A
029F E4                CLR     A
02A0 3400        R     ADDC    A,#HIGH rx_word
02A2 F583              MOV     DPH,A
02A4 E0                MOVX    A,@DPTR
02A5 FF                MOV     R7,A
02A6 900000      R     MOV     DPTR,#switch_cmd
02A9 EF                MOV     A,R7
02AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
02AB 7F01              MOV     R7,#01H
02AD 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 138
02B0 900000      R     MOV     DPTR,#cmd_exct
02B3 E4                CLR     A
02B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
02B5 900000      R     MOV     DPTR,#dat_cnt
02B8 E4                CLR     A
02B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
02BA 020000      R     LJMP    ?C0168
02BD         ?C0036:
                                           ; SOURCE LINE # 142
02BD 900000      R     MOV     DPTR,#word
02C0 E0                MOVX    A,@DPTR
02C1 FF                MOV     R7,A
02C2 EF                MOV     A,R7
02C3 64FC              XRL     A,#0FCH
02C5 706C              JNZ     ?C0041
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
02C7 900000      E     MOV     DPTR,#i
02CA E4                CLR     A
02CB F0                MOVX    @DPTR,A
02CC         ?C0042:
02CC 900000      E     MOV     DPTR,#i
02CF E0                MOVX    A,@DPTR
02D0 FF                MOV     R7,A
02D1 EF                MOV     A,R7
02D2 D3                SETB    C
02D3 9408              SUBB    A,#08H
02D5 5019              JNC     ?C0043
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
02D7 900000      E     MOV     DPTR,#i
02DA E0                MOVX    A,@DPTR
02DB FF                MOV     R7,A
02DC 7400        R     MOV     A,#LOW rx_word
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 20  

02DE 2F                ADD     A,R7
02DF F582              MOV     DPL,A
02E1 E4                CLR     A
02E2 3400        R     ADDC    A,#HIGH rx_word
02E4 F583              MOV     DPH,A
02E6 E4                CLR     A
02E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
02E8 900000      E     MOV     DPTR,#i
02EB E0                MOVX    A,@DPTR
02EC 04                INC     A
02ED F0                MOVX    @DPTR,A
02EE 80DC              SJMP    ?C0042
02F0         ?C0043:
                                           ; SOURCE LINE # 148
02F0 900000      E     MOV     DPTR,#i
02F3 E4                CLR     A
02F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
02F5 900000      R     MOV     DPTR,#word
02F8 E0                MOVX    A,@DPTR
02F9 FF                MOV     R7,A
02FA 900000      E     MOV     DPTR,#i
02FD E0                MOVX    A,@DPTR
02FE FE                MOV     R6,A
02FF 7400        R     MOV     A,#LOW rx_word
0301 2E                ADD     A,R6
0302 F582              MOV     DPL,A
0304 E4                CLR     A
0305 3400        R     ADDC    A,#HIGH rx_word
0307 F583              MOV     DPH,A
0309 EF                MOV     A,R7
030A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
030B 900000      E     MOV     DPTR,#i
030E E0                MOVX    A,@DPTR
030F FF                MOV     R7,A
0310 7400        R     MOV     A,#LOW rx_word
0312 2F                ADD     A,R7
0313 F582              MOV     DPL,A
0315 E4                CLR     A
0316 3400        R     ADDC    A,#HIGH rx_word
0318 F583              MOV     DPH,A
031A E0                MOVX    A,@DPTR
031B FF                MOV     R7,A
031C 900000      R     MOV     DPTR,#switch_cmd
031F EF                MOV     A,R7
0320 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0321 7F01              MOV     R7,#01H
0323 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 153
0326 900000      R     MOV     DPTR,#cmd_exct
0329 E4                CLR     A
032A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
032B 900000      R     MOV     DPTR,#dat_cnt
032E E4                CLR     A
032F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0330 020000      R     LJMP    ?C0168
0333         ?C0041:
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 21  

                                           ; SOURCE LINE # 157
0333 900000      R     MOV     DPTR,#word
0336 E0                MOVX    A,@DPTR
0337 FF                MOV     R7,A
0338 EF                MOV     A,R7
0339 6406              XRL     A,#06H
033B 706C              JNZ     ?C0046
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
033D 900000      E     MOV     DPTR,#i
0340 E4                CLR     A
0341 F0                MOVX    @DPTR,A
0342         ?C0047:
0342 900000      E     MOV     DPTR,#i
0345 E0                MOVX    A,@DPTR
0346 FF                MOV     R7,A
0347 EF                MOV     A,R7
0348 D3                SETB    C
0349 9408              SUBB    A,#08H
034B 5019              JNC     ?C0048
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
034D 900000      E     MOV     DPTR,#i
0350 E0                MOVX    A,@DPTR
0351 FF                MOV     R7,A
0352 7400        R     MOV     A,#LOW rx_word
0354 2F                ADD     A,R7
0355 F582              MOV     DPL,A
0357 E4                CLR     A
0358 3400        R     ADDC    A,#HIGH rx_word
035A F583              MOV     DPH,A
035C E4                CLR     A
035D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
035E 900000      E     MOV     DPTR,#i
0361 E0                MOVX    A,@DPTR
0362 04                INC     A
0363 F0                MOVX    @DPTR,A
0364 80DC              SJMP    ?C0047
0366         ?C0048:
                                           ; SOURCE LINE # 163
0366 900000      E     MOV     DPTR,#i
0369 E4                CLR     A
036A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
036B 900000      R     MOV     DPTR,#word
036E E0                MOVX    A,@DPTR
036F FF                MOV     R7,A
0370 900000      E     MOV     DPTR,#i
0373 E0                MOVX    A,@DPTR
0374 FE                MOV     R6,A
0375 7400        R     MOV     A,#LOW rx_word
0377 2E                ADD     A,R6
0378 F582              MOV     DPL,A
037A E4                CLR     A
037B 3400        R     ADDC    A,#HIGH rx_word
037D F583              MOV     DPH,A
037F EF                MOV     A,R7
0380 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0381 900000      E     MOV     DPTR,#i
0384 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 22  

0385 FF                MOV     R7,A
0386 7400        R     MOV     A,#LOW rx_word
0388 2F                ADD     A,R7
0389 F582              MOV     DPL,A
038B E4                CLR     A
038C 3400        R     ADDC    A,#HIGH rx_word
038E F583              MOV     DPH,A
0390 E0                MOVX    A,@DPTR
0391 FF                MOV     R7,A
0392 900000      R     MOV     DPTR,#switch_cmd
0395 EF                MOV     A,R7
0396 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0397 7F01              MOV     R7,#01H
0399 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 168
039C 900000      R     MOV     DPTR,#cmd_exct
039F E4                CLR     A
03A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
03A1 900000      R     MOV     DPTR,#dat_cnt
03A4 E4                CLR     A
03A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
03A6 020000      R     LJMP    ?C0168
03A9         ?C0046:
                                           ; SOURCE LINE # 172
03A9 900000      R     MOV     DPTR,#word
03AC E0                MOVX    A,@DPTR
03AD FF                MOV     R7,A
03AE EF                MOV     A,R7
03AF 6408              XRL     A,#08H
03B1 702C              JNZ     ?C0051
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
03B3 7BFF              MOV     R3,#0FFH
03B5 7A00        R     MOV     R2,#HIGH ?SC_0
03B7 7900        R     MOV     R1,#LOW ?SC_0
03B9 120000      E     LCALL   _UART_PutString
03BC         ?C0052:
                                           ; SOURCE LINE # 175
03BC 120000      E     LCALL   UART_ReadTxStatus
03BF EF                MOV     A,R7
03C0 30E1F9            JNB     ACC.1,?C0052
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 178
03C3         ?C0053:
                                           ; SOURCE LINE # 180
03C3 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 181
03C6 7F27              MOV     R7,#027H
03C8 120000      E     LCALL   _UART_WriteTxData
03CB         ?C0054:
                                           ; SOURCE LINE # 182
03CB 120000      E     LCALL   UART_ReadTxStatus
03CE EF                MOV     A,R7
03CF 30E1F9            JNB     ACC.1,?C0054
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 185
03D2         ?C0055:
                                           ; SOURCE LINE # 186
03D2 900000      R     MOV     DPTR,#cmd_exct
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 23  

03D5 E4                CLR     A
03D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
03D7 900000      R     MOV     DPTR,#dat_cnt
03DA E4                CLR     A
03DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
03DC 020000      R     LJMP    ?C0168
03DF         ?C0051:
                                           ; SOURCE LINE # 190
03DF 900000      R     MOV     DPTR,#word
03E2 E0                MOVX    A,@DPTR
03E3 FF                MOV     R7,A
03E4 EF                MOV     A,R7
03E5 64D0              XRL     A,#0D0H
03E7 7038              JNZ     ?C0057
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
03E9 7BFF              MOV     R3,#0FFH
03EB 7A00        R     MOV     R2,#HIGH ?SC_0
03ED 7900        R     MOV     R1,#LOW ?SC_0
03EF 120000      E     LCALL   _UART_PutString
03F2         ?C0058:
                                           ; SOURCE LINE # 193
03F2 120000      E     LCALL   UART_ReadTxStatus
03F5 EF                MOV     A,R7
03F6 30E1F9            JNB     ACC.1,?C0058
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 196
03F9         ?C0059:
                                           ; SOURCE LINE # 198
03F9 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 199
03FC 7F03              MOV     R7,#03H
03FE 120000      E     LCALL   _UART_WriteTxData
0401         ?C0060:
                                           ; SOURCE LINE # 200
0401 120000      E     LCALL   UART_ReadTxStatus
0404 EF                MOV     A,R7
0405 30E1F9            JNB     ACC.1,?C0060
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 203
0408         ?C0061:
                                           ; SOURCE LINE # 204
0408 7F01              MOV     R7,#01H
040A 120000      E     LCALL   _UART_WriteTxData
040D         ?C0062:
                                           ; SOURCE LINE # 205
040D 120000      E     LCALL   UART_ReadTxStatus
0410 EF                MOV     A,R7
0411 30E1F9            JNB     ACC.1,?C0062
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 208
0414         ?C0063:
                                           ; SOURCE LINE # 209
0414 900000      R     MOV     DPTR,#cmd_exct
0417 E4                CLR     A
0418 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0419 900000      R     MOV     DPTR,#dat_cnt
041C E4                CLR     A
041D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 24  

                                           ; SOURCE LINE # 211
041E 020000      R     LJMP    ?C0168
0421         ?C0057:
                                           ; SOURCE LINE # 212
0421 900000      R     MOV     DPTR,#word
0424 E0                MOVX    A,@DPTR
0425 FF                MOV     R7,A
0426 EF                MOV     A,R7
0427 6409              XRL     A,#09H
0429 7045              JNZ     ?C0065
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
042B 900000      E     MOV     DPTR,#i
042E E4                CLR     A
042F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0430 900000      R     MOV     DPTR,#word
0433 E0                MOVX    A,@DPTR
0434 FF                MOV     R7,A
0435 900000      E     MOV     DPTR,#i
0438 E0                MOVX    A,@DPTR
0439 FE                MOV     R6,A
043A 7400        R     MOV     A,#LOW rx_word
043C 2E                ADD     A,R6
043D F582              MOV     DPL,A
043F E4                CLR     A
0440 3400        R     ADDC    A,#HIGH rx_word
0442 F583              MOV     DPH,A
0444 EF                MOV     A,R7
0445 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0446 900000      E     MOV     DPTR,#i
0449 E0                MOVX    A,@DPTR
044A 04                INC     A
044B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
044C 900000      R     MOV     DPTR,#dat_cnt
044F 7402              MOV     A,#02H
0451 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0452 900000      R     MOV     DPTR,#status
0455 7403              MOV     A,#03H
0457 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0458 7BFF              MOV     R3,#0FFH
045A 7A00        R     MOV     R2,#HIGH ?SC_0
045C 7900        R     MOV     R1,#LOW ?SC_0
045E 120000      E     LCALL   _UART_PutString
0461         ?C0066:
                                           ; SOURCE LINE # 221
0461 120000      E     LCALL   UART_ReadTxStatus
0464 EF                MOV     A,R7
0465 30E103            JNB     ACC.1,$ + 6H
0468 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 224
046B 80F4              SJMP    ?C0066
046D         ?C0067:
                                           ; SOURCE LINE # 225
046D 020000      R     LJMP    ?C0168
0470         ?C0065:
                                           ; SOURCE LINE # 226
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 25  

0470 900000      R     MOV     DPTR,#word
0473 E0                MOVX    A,@DPTR
0474 FF                MOV     R7,A
0475 EF                MOV     A,R7
0476 640A              XRL     A,#0AH
0478 7043              JNZ     ?C0069
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
047A 900000      E     MOV     DPTR,#i
047D E4                CLR     A
047E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
047F 900000      R     MOV     DPTR,#word
0482 E0                MOVX    A,@DPTR
0483 FF                MOV     R7,A
0484 900000      E     MOV     DPTR,#i
0487 E0                MOVX    A,@DPTR
0488 FE                MOV     R6,A
0489 7400        R     MOV     A,#LOW rx_word
048B 2E                ADD     A,R6
048C F582              MOV     DPL,A
048E E4                CLR     A
048F 3400        R     ADDC    A,#HIGH rx_word
0491 F583              MOV     DPH,A
0493 EF                MOV     A,R7
0494 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0495 900000      E     MOV     DPTR,#i
0498 E0                MOVX    A,@DPTR
0499 FF                MOV     R7,A
049A 7400        R     MOV     A,#LOW rx_word
049C 2F                ADD     A,R7
049D F582              MOV     DPL,A
049F E4                CLR     A
04A0 3400        R     ADDC    A,#HIGH rx_word
04A2 F583              MOV     DPH,A
04A4 E0                MOVX    A,@DPTR
04A5 FF                MOV     R7,A
04A6 900000      R     MOV     DPTR,#switch_cmd
04A9 EF                MOV     A,R7
04AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
04AB 7F01              MOV     R7,#01H
04AD 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 233
04B0 900000      R     MOV     DPTR,#cmd_exct
04B3 E4                CLR     A
04B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
04B5 900000      R     MOV     DPTR,#dat_cnt
04B8 E4                CLR     A
04B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
04BA 020000      R     LJMP    ?C0168
04BD         ?C0069:
                                           ; SOURCE LINE # 237
04BD 900000      R     MOV     DPTR,#word
04C0 E0                MOVX    A,@DPTR
04C1 FF                MOV     R7,A
04C2 EF                MOV     A,R7
04C3 640B              XRL     A,#0BH
04C5 7045              JNZ     ?C0071
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 26  

                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
04C7 900000      E     MOV     DPTR,#i
04CA E4                CLR     A
04CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
04CC 900000      R     MOV     DPTR,#word
04CF E0                MOVX    A,@DPTR
04D0 FF                MOV     R7,A
04D1 900000      E     MOV     DPTR,#i
04D4 E0                MOVX    A,@DPTR
04D5 FE                MOV     R6,A
04D6 7400        R     MOV     A,#LOW rx_word
04D8 2E                ADD     A,R6
04D9 F582              MOV     DPL,A
04DB E4                CLR     A
04DC 3400        R     ADDC    A,#HIGH rx_word
04DE F583              MOV     DPH,A
04E0 EF                MOV     A,R7
04E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
04E2 900000      E     MOV     DPTR,#i
04E5 E0                MOVX    A,@DPTR
04E6 04                INC     A
04E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
04E8 900000      R     MOV     DPTR,#dat_cnt
04EB 7401              MOV     A,#01H
04ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
04EE 900000      R     MOV     DPTR,#status
04F1 7402              MOV     A,#02H
04F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
04F4 7BFF              MOV     R3,#0FFH
04F6 7A00        R     MOV     R2,#HIGH ?SC_0
04F8 7900        R     MOV     R1,#LOW ?SC_0
04FA 120000      E     LCALL   _UART_PutString
04FD         ?C0072:
                                           ; SOURCE LINE # 246
04FD 120000      E     LCALL   UART_ReadTxStatus
0500 EF                MOV     A,R7
0501 30E103            JNB     ACC.1,$ + 6H
0504 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 249
0507 80F4              SJMP    ?C0072
0509         ?C0073:
                                           ; SOURCE LINE # 250
0509 020000      R     LJMP    ?C0168
050C         ?C0071:
                                           ; SOURCE LINE # 251
050C 900000      R     MOV     DPTR,#word
050F E0                MOVX    A,@DPTR
0510 FF                MOV     R7,A
0511 EF                MOV     A,R7
0512 640C              XRL     A,#0CH
0514 7045              JNZ     ?C0075
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0516 900000      E     MOV     DPTR,#i
0519 E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 27  

051A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
051B 900000      R     MOV     DPTR,#word
051E E0                MOVX    A,@DPTR
051F FF                MOV     R7,A
0520 900000      E     MOV     DPTR,#i
0523 E0                MOVX    A,@DPTR
0524 FE                MOV     R6,A
0525 7400        R     MOV     A,#LOW rx_word
0527 2E                ADD     A,R6
0528 F582              MOV     DPL,A
052A E4                CLR     A
052B 3400        R     ADDC    A,#HIGH rx_word
052D F583              MOV     DPH,A
052F EF                MOV     A,R7
0530 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0531 900000      E     MOV     DPTR,#i
0534 E0                MOVX    A,@DPTR
0535 04                INC     A
0536 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0537 900000      R     MOV     DPTR,#dat_cnt
053A 7401              MOV     A,#01H
053C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
053D 900000      R     MOV     DPTR,#status
0540 7402              MOV     A,#02H
0542 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0543 7BFF              MOV     R3,#0FFH
0545 7A00        R     MOV     R2,#HIGH ?SC_0
0547 7900        R     MOV     R1,#LOW ?SC_0
0549 120000      E     LCALL   _UART_PutString
054C         ?C0076:
                                           ; SOURCE LINE # 260
054C 120000      E     LCALL   UART_ReadTxStatus
054F EF                MOV     A,R7
0550 30E103            JNB     ACC.1,$ + 6H
0553 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 263
0556 80F4              SJMP    ?C0076
0558         ?C0077:
                                           ; SOURCE LINE # 264
0558 020000      R     LJMP    ?C0168
055B         ?C0075:
                                           ; SOURCE LINE # 265
055B 900000      R     MOV     DPTR,#word
055E E0                MOVX    A,@DPTR
055F FF                MOV     R7,A
0560 EF                MOV     A,R7
0561 6410              XRL     A,#010H
0563 706C              JNZ     ?C0079
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0565 900000      E     MOV     DPTR,#i
0568 E4                CLR     A
0569 F0                MOVX    @DPTR,A
056A         ?C0080:
056A 900000      E     MOV     DPTR,#i
056D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 28  

056E FF                MOV     R7,A
056F EF                MOV     A,R7
0570 D3                SETB    C
0571 9408              SUBB    A,#08H
0573 5019              JNC     ?C0081
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0575 900000      E     MOV     DPTR,#i
0578 E0                MOVX    A,@DPTR
0579 FF                MOV     R7,A
057A 7400        R     MOV     A,#LOW rx_word
057C 2F                ADD     A,R7
057D F582              MOV     DPL,A
057F E4                CLR     A
0580 3400        R     ADDC    A,#HIGH rx_word
0582 F583              MOV     DPH,A
0584 E4                CLR     A
0585 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0586 900000      E     MOV     DPTR,#i
0589 E0                MOVX    A,@DPTR
058A 04                INC     A
058B F0                MOVX    @DPTR,A
058C 80DC              SJMP    ?C0080
058E         ?C0081:
                                           ; SOURCE LINE # 271
058E 900000      E     MOV     DPTR,#i
0591 E4                CLR     A
0592 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
0593 900000      R     MOV     DPTR,#word
0596 E0                MOVX    A,@DPTR
0597 FF                MOV     R7,A
0598 900000      E     MOV     DPTR,#i
059B E0                MOVX    A,@DPTR
059C FE                MOV     R6,A
059D 7400        R     MOV     A,#LOW rx_word
059F 2E                ADD     A,R6
05A0 F582              MOV     DPL,A
05A2 E4                CLR     A
05A3 3400        R     ADDC    A,#HIGH rx_word
05A5 F583              MOV     DPH,A
05A7 EF                MOV     A,R7
05A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
05A9 900000      E     MOV     DPTR,#i
05AC E0                MOVX    A,@DPTR
05AD FF                MOV     R7,A
05AE 7400        R     MOV     A,#LOW rx_word
05B0 2F                ADD     A,R7
05B1 F582              MOV     DPL,A
05B3 E4                CLR     A
05B4 3400        R     ADDC    A,#HIGH rx_word
05B6 F583              MOV     DPH,A
05B8 E0                MOVX    A,@DPTR
05B9 FF                MOV     R7,A
05BA 900000      R     MOV     DPTR,#switch_cmd
05BD EF                MOV     A,R7
05BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
05BF 7F01              MOV     R7,#01H
05C1 120000      E     LCALL   _os_send_signal
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 29  

                                           ; SOURCE LINE # 276
05C4 900000      R     MOV     DPTR,#cmd_exct
05C7 E4                CLR     A
05C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
05C9 900000      R     MOV     DPTR,#dat_cnt
05CC E4                CLR     A
05CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
05CE 020000      R     LJMP    ?C0168
05D1         ?C0079:
                                           ; SOURCE LINE # 280
05D1 900000      R     MOV     DPTR,#word
05D4 E0                MOVX    A,@DPTR
05D5 FF                MOV     R7,A
05D6 EF                MOV     A,R7
05D7 6411              XRL     A,#011H
05D9 706C              JNZ     ?C0084
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
05DB 900000      E     MOV     DPTR,#i
05DE E4                CLR     A
05DF F0                MOVX    @DPTR,A
05E0         ?C0085:
05E0 900000      E     MOV     DPTR,#i
05E3 E0                MOVX    A,@DPTR
05E4 FF                MOV     R7,A
05E5 EF                MOV     A,R7
05E6 D3                SETB    C
05E7 9408              SUBB    A,#08H
05E9 5019              JNC     ?C0086
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
05EB 900000      E     MOV     DPTR,#i
05EE E0                MOVX    A,@DPTR
05EF FF                MOV     R7,A
05F0 7400        R     MOV     A,#LOW rx_word
05F2 2F                ADD     A,R7
05F3 F582              MOV     DPL,A
05F5 E4                CLR     A
05F6 3400        R     ADDC    A,#HIGH rx_word
05F8 F583              MOV     DPH,A
05FA E4                CLR     A
05FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
05FC 900000      E     MOV     DPTR,#i
05FF E0                MOVX    A,@DPTR
0600 04                INC     A
0601 F0                MOVX    @DPTR,A
0602 80DC              SJMP    ?C0085
0604         ?C0086:
                                           ; SOURCE LINE # 286
0604 900000      E     MOV     DPTR,#i
0607 E4                CLR     A
0608 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0609 900000      R     MOV     DPTR,#word
060C E0                MOVX    A,@DPTR
060D FF                MOV     R7,A
060E 900000      E     MOV     DPTR,#i
0611 E0                MOVX    A,@DPTR
0612 FE                MOV     R6,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 30  

0613 7400        R     MOV     A,#LOW rx_word
0615 2E                ADD     A,R6
0616 F582              MOV     DPL,A
0618 E4                CLR     A
0619 3400        R     ADDC    A,#HIGH rx_word
061B F583              MOV     DPH,A
061D EF                MOV     A,R7
061E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
061F 900000      E     MOV     DPTR,#i
0622 E0                MOVX    A,@DPTR
0623 FF                MOV     R7,A
0624 7400        R     MOV     A,#LOW rx_word
0626 2F                ADD     A,R7
0627 F582              MOV     DPL,A
0629 E4                CLR     A
062A 3400        R     ADDC    A,#HIGH rx_word
062C F583              MOV     DPH,A
062E E0                MOVX    A,@DPTR
062F FF                MOV     R7,A
0630 900000      R     MOV     DPTR,#switch_cmd
0633 EF                MOV     A,R7
0634 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0635 7F01              MOV     R7,#01H
0637 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 291
063A 900000      R     MOV     DPTR,#cmd_exct
063D E4                CLR     A
063E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
063F 900000      R     MOV     DPTR,#dat_cnt
0642 E4                CLR     A
0643 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0644 020000      R     LJMP    ?C0168
0647         ?C0084:
                                           ; SOURCE LINE # 295
0647 900000      R     MOV     DPTR,#word
064A E0                MOVX    A,@DPTR
064B FF                MOV     R7,A
064C EF                MOV     A,R7
064D 6418              XRL     A,#018H
064F 705C              JNZ     ?C0089
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 302
0651 7BFF              MOV     R3,#0FFH
0653 7A00        R     MOV     R2,#HIGH ?SC_5
0655 7900        R     MOV     R1,#LOW ?SC_5
0657 120000      E     LCALL   _UART_PutString
065A         ?C0090:
                                           ; SOURCE LINE # 303
065A 120000      E     LCALL   UART_ReadTxStatus
065D EF                MOV     A,R7
065E 30E1F9            JNB     ACC.1,?C0090
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 306
0661         ?C0091:
                                           ; SOURCE LINE # 308
0661 7BFF              MOV     R3,#0FFH
0663 7A00        R     MOV     R2,#HIGH ?SC_5
0665 7900        R     MOV     R1,#LOW ?SC_5
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 31  

0667 120000      E     LCALL   _UART_PutString
066A         ?C0092:
                                           ; SOURCE LINE # 309
066A 120000      E     LCALL   UART_ReadTxStatus
066D EF                MOV     A,R7
066E 30E1F9            JNB     ACC.1,?C0092
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 312
0671         ?C0093:
                                           ; SOURCE LINE # 314
0671 7BFF              MOV     R3,#0FFH
0673 7A00        R     MOV     R2,#HIGH ?SC_5
0675 7900        R     MOV     R1,#LOW ?SC_5
0677 120000      E     LCALL   _UART_PutString
067A         ?C0094:
                                           ; SOURCE LINE # 315
067A 120000      E     LCALL   UART_ReadTxStatus
067D EF                MOV     A,R7
067E 30E1F9            JNB     ACC.1,?C0094
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 318
0681         ?C0095:
                                           ; SOURCE LINE # 320
0681 7BFF              MOV     R3,#0FFH
0683 7A00        R     MOV     R2,#HIGH ?SC_7
0685 7900        R     MOV     R1,#LOW ?SC_7
0687 120000      E     LCALL   _UART_PutString
068A         ?C0096:
                                           ; SOURCE LINE # 321
068A 120000      E     LCALL   UART_ReadTxStatus
068D EF                MOV     A,R7
068E 30E1F9            JNB     ACC.1,?C0096
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
0691         ?C0097:
                                           ; SOURCE LINE # 326
0691 900000      R     MOV     DPTR,#prb_sts
0694 E0                MOVX    A,@DPTR
0695 FF                MOV     R7,A
0696 120000      E     LCALL   _UART_WriteTxData
0699         ?C0098:
                                           ; SOURCE LINE # 327
0699 120000      E     LCALL   UART_ReadTxStatus
069C EF                MOV     A,R7
069D 30E1F9            JNB     ACC.1,?C0098
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 330
06A0         ?C0099:
                                           ; SOURCE LINE # 332
06A0 900000      R     MOV     DPTR,#cmd_exct
06A3 E4                CLR     A
06A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
06A5 900000      R     MOV     DPTR,#dat_cnt
06A8 E4                CLR     A
06A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
06AA 020000      R     LJMP    ?C0168
06AD         ?C0089:
                                           ; SOURCE LINE # 335
06AD 900000      R     MOV     DPTR,#word
06B0 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 32  

06B1 FF                MOV     R7,A
06B2 EF                MOV     A,R7
06B3 641C              XRL     A,#01CH
06B5 7045              JNZ     ?C0101
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
06B7 900000      E     MOV     DPTR,#i
06BA E4                CLR     A
06BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
06BC 900000      R     MOV     DPTR,#word
06BF E0                MOVX    A,@DPTR
06C0 FF                MOV     R7,A
06C1 900000      E     MOV     DPTR,#i
06C4 E0                MOVX    A,@DPTR
06C5 FE                MOV     R6,A
06C6 7400        R     MOV     A,#LOW rx_word
06C8 2E                ADD     A,R6
06C9 F582              MOV     DPL,A
06CB E4                CLR     A
06CC 3400        R     ADDC    A,#HIGH rx_word
06CE F583              MOV     DPH,A
06D0 EF                MOV     A,R7
06D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
06D2 900000      E     MOV     DPTR,#i
06D5 E0                MOVX    A,@DPTR
06D6 04                INC     A
06D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
06D8 900000      R     MOV     DPTR,#dat_cnt
06DB 7401              MOV     A,#01H
06DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
06DE 900000      R     MOV     DPTR,#status
06E1 7402              MOV     A,#02H
06E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
06E4 7BFF              MOV     R3,#0FFH
06E6 7A00        R     MOV     R2,#HIGH ?SC_0
06E8 7900        R     MOV     R1,#LOW ?SC_0
06EA 120000      E     LCALL   _UART_PutString
06ED         ?C0102:
                                           ; SOURCE LINE # 344
06ED 120000      E     LCALL   UART_ReadTxStatus
06F0 EF                MOV     A,R7
06F1 30E103            JNB     ACC.1,$ + 6H
06F4 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 347
06F7 80F4              SJMP    ?C0102
06F9         ?C0103:
                                           ; SOURCE LINE # 348
06F9 020000      R     LJMP    ?C0168
06FC         ?C0101:
                                           ; SOURCE LINE # 349
06FC 900000      R     MOV     DPTR,#word
06FF E0                MOVX    A,@DPTR
0700 FF                MOV     R7,A
0701 EF                MOV     A,R7
0702 6440              XRL     A,#040H
0704 706C              JNZ     ?C0105
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 33  

                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
0706 900000      E     MOV     DPTR,#i
0709 E4                CLR     A
070A F0                MOVX    @DPTR,A
070B         ?C0106:
070B 900000      E     MOV     DPTR,#i
070E E0                MOVX    A,@DPTR
070F FF                MOV     R7,A
0710 EF                MOV     A,R7
0711 D3                SETB    C
0712 9408              SUBB    A,#08H
0714 5019              JNC     ?C0107
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0716 900000      E     MOV     DPTR,#i
0719 E0                MOVX    A,@DPTR
071A FF                MOV     R7,A
071B 7400        R     MOV     A,#LOW rx_word
071D 2F                ADD     A,R7
071E F582              MOV     DPL,A
0720 E4                CLR     A
0721 3400        R     ADDC    A,#HIGH rx_word
0723 F583              MOV     DPH,A
0725 E4                CLR     A
0726 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0727 900000      E     MOV     DPTR,#i
072A E0                MOVX    A,@DPTR
072B 04                INC     A
072C F0                MOVX    @DPTR,A
072D 80DC              SJMP    ?C0106
072F         ?C0107:
                                           ; SOURCE LINE # 355
072F 900000      E     MOV     DPTR,#i
0732 E4                CLR     A
0733 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0734 900000      R     MOV     DPTR,#word
0737 E0                MOVX    A,@DPTR
0738 FF                MOV     R7,A
0739 900000      E     MOV     DPTR,#i
073C E0                MOVX    A,@DPTR
073D FE                MOV     R6,A
073E 7400        R     MOV     A,#LOW rx_word
0740 2E                ADD     A,R6
0741 F582              MOV     DPL,A
0743 E4                CLR     A
0744 3400        R     ADDC    A,#HIGH rx_word
0746 F583              MOV     DPH,A
0748 EF                MOV     A,R7
0749 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
074A 900000      E     MOV     DPTR,#i
074D E0                MOVX    A,@DPTR
074E FF                MOV     R7,A
074F 7400        R     MOV     A,#LOW rx_word
0751 2F                ADD     A,R7
0752 F582              MOV     DPL,A
0754 E4                CLR     A
0755 3400        R     ADDC    A,#HIGH rx_word
0757 F583              MOV     DPH,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 34  

0759 E0                MOVX    A,@DPTR
075A FF                MOV     R7,A
075B 900000      R     MOV     DPTR,#switch_cmd
075E EF                MOV     A,R7
075F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0760 7F01              MOV     R7,#01H
0762 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 360
0765 900000      R     MOV     DPTR,#cmd_exct
0768 E4                CLR     A
0769 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
076A 900000      R     MOV     DPTR,#dat_cnt
076D E4                CLR     A
076E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
076F 020000      R     LJMP    ?C0168
0772         ?C0105:
                                           ; SOURCE LINE # 364
0772 900000      R     MOV     DPTR,#word
0775 E0                MOVX    A,@DPTR
0776 FF                MOV     R7,A
0777 EF                MOV     A,R7
0778 6445              XRL     A,#045H
077A 706C              JNZ     ?C0110
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
077C 900000      E     MOV     DPTR,#i
077F E4                CLR     A
0780 F0                MOVX    @DPTR,A
0781         ?C0111:
0781 900000      E     MOV     DPTR,#i
0784 E0                MOVX    A,@DPTR
0785 FF                MOV     R7,A
0786 EF                MOV     A,R7
0787 D3                SETB    C
0788 9408              SUBB    A,#08H
078A 5019              JNC     ?C0112
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
078C 900000      E     MOV     DPTR,#i
078F E0                MOVX    A,@DPTR
0790 FF                MOV     R7,A
0791 7400        R     MOV     A,#LOW rx_word
0793 2F                ADD     A,R7
0794 F582              MOV     DPL,A
0796 E4                CLR     A
0797 3400        R     ADDC    A,#HIGH rx_word
0799 F583              MOV     DPH,A
079B E4                CLR     A
079C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
079D 900000      E     MOV     DPTR,#i
07A0 E0                MOVX    A,@DPTR
07A1 04                INC     A
07A2 F0                MOVX    @DPTR,A
07A3 80DC              SJMP    ?C0111
07A5         ?C0112:
                                           ; SOURCE LINE # 370
07A5 900000      E     MOV     DPTR,#i
07A8 E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 35  

07A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
07AA 900000      R     MOV     DPTR,#word
07AD E0                MOVX    A,@DPTR
07AE FF                MOV     R7,A
07AF 900000      E     MOV     DPTR,#i
07B2 E0                MOVX    A,@DPTR
07B3 FE                MOV     R6,A
07B4 7400        R     MOV     A,#LOW rx_word
07B6 2E                ADD     A,R6
07B7 F582              MOV     DPL,A
07B9 E4                CLR     A
07BA 3400        R     ADDC    A,#HIGH rx_word
07BC F583              MOV     DPH,A
07BE EF                MOV     A,R7
07BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
07C0 900000      E     MOV     DPTR,#i
07C3 E0                MOVX    A,@DPTR
07C4 FF                MOV     R7,A
07C5 7400        R     MOV     A,#LOW rx_word
07C7 2F                ADD     A,R7
07C8 F582              MOV     DPL,A
07CA E4                CLR     A
07CB 3400        R     ADDC    A,#HIGH rx_word
07CD F583              MOV     DPH,A
07CF E0                MOVX    A,@DPTR
07D0 FF                MOV     R7,A
07D1 900000      R     MOV     DPTR,#switch_cmd
07D4 EF                MOV     A,R7
07D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
07D6 7F01              MOV     R7,#01H
07D8 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 375
07DB 900000      R     MOV     DPTR,#cmd_exct
07DE E4                CLR     A
07DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
07E0 900000      R     MOV     DPTR,#dat_cnt
07E3 E4                CLR     A
07E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
07E5 020000      R     LJMP    ?C0168
07E8         ?C0110:
                                           ; SOURCE LINE # 379
07E8 900000      R     MOV     DPTR,#word
07EB E0                MOVX    A,@DPTR
07EC FF                MOV     R7,A
07ED EF                MOV     A,R7
07EE 6446              XRL     A,#046H
07F0 706C              JNZ     ?C0115
                                           ; SOURCE LINE # 380
07F2 900000      E     MOV     DPTR,#i
07F5 E4                CLR     A
07F6 F0                MOVX    @DPTR,A
07F7         ?C0116:
07F7 900000      E     MOV     DPTR,#i
07FA E0                MOVX    A,@DPTR
07FB FF                MOV     R7,A
07FC EF                MOV     A,R7
07FD D3                SETB    C
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 36  

07FE 9408              SUBB    A,#08H
0800 5019              JNC     ?C0117
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0802 900000      E     MOV     DPTR,#i
0805 E0                MOVX    A,@DPTR
0806 FF                MOV     R7,A
0807 7400        R     MOV     A,#LOW rx_word
0809 2F                ADD     A,R7
080A F582              MOV     DPL,A
080C E4                CLR     A
080D 3400        R     ADDC    A,#HIGH rx_word
080F F583              MOV     DPH,A
0811 E4                CLR     A
0812 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
0813 900000      E     MOV     DPTR,#i
0816 E0                MOVX    A,@DPTR
0817 04                INC     A
0818 F0                MOVX    @DPTR,A
0819 80DC              SJMP    ?C0116
081B         ?C0117:
                                           ; SOURCE LINE # 384
081B 900000      E     MOV     DPTR,#i
081E E4                CLR     A
081F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0820 900000      R     MOV     DPTR,#word
0823 E0                MOVX    A,@DPTR
0824 FF                MOV     R7,A
0825 900000      E     MOV     DPTR,#i
0828 E0                MOVX    A,@DPTR
0829 FE                MOV     R6,A
082A 7400        R     MOV     A,#LOW rx_word
082C 2E                ADD     A,R6
082D F582              MOV     DPL,A
082F E4                CLR     A
0830 3400        R     ADDC    A,#HIGH rx_word
0832 F583              MOV     DPH,A
0834 EF                MOV     A,R7
0835 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0836 900000      E     MOV     DPTR,#i
0839 E0                MOVX    A,@DPTR
083A FF                MOV     R7,A
083B 7400        R     MOV     A,#LOW rx_word
083D 2F                ADD     A,R7
083E F582              MOV     DPL,A
0840 E4                CLR     A
0841 3400        R     ADDC    A,#HIGH rx_word
0843 F583              MOV     DPH,A
0845 E0                MOVX    A,@DPTR
0846 FF                MOV     R7,A
0847 900000      R     MOV     DPTR,#switch_cmd
084A EF                MOV     A,R7
084B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
084C 7F01              MOV     R7,#01H
084E 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 389
0851 900000      R     MOV     DPTR,#cmd_exct
0854 E4                CLR     A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 37  

0855 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
0856 900000      R     MOV     DPTR,#dat_cnt
0859 E4                CLR     A
085A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
085B 020000      R     LJMP    ?C0168
085E         ?C0115:
                                           ; SOURCE LINE # 393
085E 900000      R     MOV     DPTR,#word
0861 E0                MOVX    A,@DPTR
0862 FF                MOV     R7,A
0863 EF                MOV     A,R7
0864 6447              XRL     A,#047H
0866 706C              JNZ     ?C0120
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0868 900000      E     MOV     DPTR,#i
086B E4                CLR     A
086C F0                MOVX    @DPTR,A
086D         ?C0121:
086D 900000      E     MOV     DPTR,#i
0870 E0                MOVX    A,@DPTR
0871 FF                MOV     R7,A
0872 EF                MOV     A,R7
0873 D3                SETB    C
0874 9408              SUBB    A,#08H
0876 5019              JNC     ?C0122
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
0878 900000      E     MOV     DPTR,#i
087B E0                MOVX    A,@DPTR
087C FF                MOV     R7,A
087D 7400        R     MOV     A,#LOW rx_word
087F 2F                ADD     A,R7
0880 F582              MOV     DPL,A
0882 E4                CLR     A
0883 3400        R     ADDC    A,#HIGH rx_word
0885 F583              MOV     DPH,A
0887 E4                CLR     A
0888 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
0889 900000      E     MOV     DPTR,#i
088C E0                MOVX    A,@DPTR
088D 04                INC     A
088E F0                MOVX    @DPTR,A
088F 80DC              SJMP    ?C0121
0891         ?C0122:
                                           ; SOURCE LINE # 399
0891 900000      E     MOV     DPTR,#i
0894 E4                CLR     A
0895 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0896 900000      R     MOV     DPTR,#word
0899 E0                MOVX    A,@DPTR
089A FF                MOV     R7,A
089B 900000      E     MOV     DPTR,#i
089E E0                MOVX    A,@DPTR
089F FE                MOV     R6,A
08A0 7400        R     MOV     A,#LOW rx_word
08A2 2E                ADD     A,R6
08A3 F582              MOV     DPL,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 38  

08A5 E4                CLR     A
08A6 3400        R     ADDC    A,#HIGH rx_word
08A8 F583              MOV     DPH,A
08AA EF                MOV     A,R7
08AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
08AC 900000      E     MOV     DPTR,#i
08AF E0                MOVX    A,@DPTR
08B0 FF                MOV     R7,A
08B1 7400        R     MOV     A,#LOW rx_word
08B3 2F                ADD     A,R7
08B4 F582              MOV     DPL,A
08B6 E4                CLR     A
08B7 3400        R     ADDC    A,#HIGH rx_word
08B9 F583              MOV     DPH,A
08BB E0                MOVX    A,@DPTR
08BC FF                MOV     R7,A
08BD 900000      R     MOV     DPTR,#switch_cmd
08C0 EF                MOV     A,R7
08C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
08C2 7F01              MOV     R7,#01H
08C4 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 404
08C7 900000      R     MOV     DPTR,#cmd_exct
08CA E4                CLR     A
08CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
08CC 900000      R     MOV     DPTR,#dat_cnt
08CF E4                CLR     A
08D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
08D1 020000      R     LJMP    ?C0168
08D4         ?C0120:
                                           ; SOURCE LINE # 408
08D4 900000      R     MOV     DPTR,#word
08D7 E0                MOVX    A,@DPTR
08D8 FF                MOV     R7,A
08D9 EF                MOV     A,R7
08DA 6448              XRL     A,#048H
08DC 706C              JNZ     ?C0125
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
08DE 900000      E     MOV     DPTR,#i
08E1 E4                CLR     A
08E2 F0                MOVX    @DPTR,A
08E3         ?C0126:
08E3 900000      E     MOV     DPTR,#i
08E6 E0                MOVX    A,@DPTR
08E7 FF                MOV     R7,A
08E8 EF                MOV     A,R7
08E9 D3                SETB    C
08EA 9408              SUBB    A,#08H
08EC 5019              JNC     ?C0127
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
08EE 900000      E     MOV     DPTR,#i
08F1 E0                MOVX    A,@DPTR
08F2 FF                MOV     R7,A
08F3 7400        R     MOV     A,#LOW rx_word
08F5 2F                ADD     A,R7
08F6 F582              MOV     DPL,A
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 39  

08F8 E4                CLR     A
08F9 3400        R     ADDC    A,#HIGH rx_word
08FB F583              MOV     DPH,A
08FD E4                CLR     A
08FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
08FF 900000      E     MOV     DPTR,#i
0902 E0                MOVX    A,@DPTR
0903 04                INC     A
0904 F0                MOVX    @DPTR,A
0905 80DC              SJMP    ?C0126
0907         ?C0127:
                                           ; SOURCE LINE # 414
0907 900000      E     MOV     DPTR,#i
090A E4                CLR     A
090B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
090C 900000      R     MOV     DPTR,#word
090F E0                MOVX    A,@DPTR
0910 FF                MOV     R7,A
0911 900000      E     MOV     DPTR,#i
0914 E0                MOVX    A,@DPTR
0915 FE                MOV     R6,A
0916 7400        R     MOV     A,#LOW rx_word
0918 2E                ADD     A,R6
0919 F582              MOV     DPL,A
091B E4                CLR     A
091C 3400        R     ADDC    A,#HIGH rx_word
091E F583              MOV     DPH,A
0920 EF                MOV     A,R7
0921 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0922 900000      E     MOV     DPTR,#i
0925 E0                MOVX    A,@DPTR
0926 FF                MOV     R7,A
0927 7400        R     MOV     A,#LOW rx_word
0929 2F                ADD     A,R7
092A F582              MOV     DPL,A
092C E4                CLR     A
092D 3400        R     ADDC    A,#HIGH rx_word
092F F583              MOV     DPH,A
0931 E0                MOVX    A,@DPTR
0932 FF                MOV     R7,A
0933 900000      R     MOV     DPTR,#switch_cmd
0936 EF                MOV     A,R7
0937 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
0938 7F01              MOV     R7,#01H
093A 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 419
093D 900000      R     MOV     DPTR,#cmd_exct
0940 E4                CLR     A
0941 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
0942 900000      R     MOV     DPTR,#dat_cnt
0945 E4                CLR     A
0946 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
0947 020000      R     LJMP    ?C0168
094A         ?C0125:
                                           ; SOURCE LINE # 423
094A 900000      R     MOV     DPTR,#word
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 40  

094D E0                MOVX    A,@DPTR
094E FF                MOV     R7,A
094F EF                MOV     A,R7
0950 6450              XRL     A,#050H
0952 7045              JNZ     ?C0130
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
0954 900000      E     MOV     DPTR,#i
0957 E4                CLR     A
0958 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
0959 900000      R     MOV     DPTR,#word
095C E0                MOVX    A,@DPTR
095D FF                MOV     R7,A
095E 900000      E     MOV     DPTR,#i
0961 E0                MOVX    A,@DPTR
0962 FE                MOV     R6,A
0963 7400        R     MOV     A,#LOW rx_word
0965 2E                ADD     A,R6
0966 F582              MOV     DPL,A
0968 E4                CLR     A
0969 3400        R     ADDC    A,#HIGH rx_word
096B F583              MOV     DPH,A
096D EF                MOV     A,R7
096E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
096F 900000      E     MOV     DPTR,#i
0972 E0                MOVX    A,@DPTR
0973 04                INC     A
0974 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0975 900000      R     MOV     DPTR,#dat_cnt
0978 7401              MOV     A,#01H
097A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
097B 900000      R     MOV     DPTR,#status
097E 7402              MOV     A,#02H
0980 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0981 7BFF              MOV     R3,#0FFH
0983 7A00        R     MOV     R2,#HIGH ?SC_0
0985 7900        R     MOV     R1,#LOW ?SC_0
0987 120000      E     LCALL   _UART_PutString
098A         ?C0131:
                                           ; SOURCE LINE # 432
098A 120000      E     LCALL   UART_ReadTxStatus
098D EF                MOV     A,R7
098E 30E103            JNB     ACC.1,$ + 6H
0991 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 435
0994 80F4              SJMP    ?C0131
0996         ?C0132:
                                           ; SOURCE LINE # 436
0996 020000      R     LJMP    ?C0168
0999         ?C0130:
                                           ; SOURCE LINE # 437
0999 900000      R     MOV     DPTR,#word
099C E0                MOVX    A,@DPTR
099D FF                MOV     R7,A
099E EF                MOV     A,R7
099F 6451              XRL     A,#051H
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 41  

09A1 7049              JNZ     ?C0134
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
09A3 900000      E     MOV     DPTR,#i
09A6 E4                CLR     A
09A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
09A8 900000      R     MOV     DPTR,#word
09AB E0                MOVX    A,@DPTR
09AC FF                MOV     R7,A
09AD 900000      E     MOV     DPTR,#i
09B0 E0                MOVX    A,@DPTR
09B1 FE                MOV     R6,A
09B2 7400        R     MOV     A,#LOW rx_word
09B4 2E                ADD     A,R6
09B5 F582              MOV     DPL,A
09B7 E4                CLR     A
09B8 3400        R     ADDC    A,#HIGH rx_word
09BA F583              MOV     DPH,A
09BC EF                MOV     A,R7
09BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
09BE 900000      E     MOV     DPTR,#i
09C1 E0                MOVX    A,@DPTR
09C2 04                INC     A
09C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
09C4 900000      R     MOV     DPTR,#dat_cnt
09C7 7401              MOV     A,#01H
09C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
09CA 900000      R     MOV     DPTR,#status
09CD 7402              MOV     A,#02H
09CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
09D0 120000      E     LCALL   UART_ClearRxBuffer
                                           ; SOURCE LINE # 446
09D3 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 447
09D6 7BFF              MOV     R3,#0FFH
09D8 7A00        R     MOV     R2,#HIGH ?SC_0
09DA 7900        R     MOV     R1,#LOW ?SC_0
09DC 120000      E     LCALL   _UART_PutString
09DF         ?C0135:
                                           ; SOURCE LINE # 448
09DF 120000      E     LCALL   UART_ReadTxStatus
09E2 EF                MOV     A,R7
09E3 30E1F9            JNB     ACC.1,?C0135
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 451
09E6         ?C0136:
                                           ; SOURCE LINE # 452
09E6 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 453
09E9 020000      R     LJMP    ?C0168
09EC         ?C0134:
                                           ; SOURCE LINE # 454
09EC 900000      R     MOV     DPTR,#word
09EF E0                MOVX    A,@DPTR
09F0 FF                MOV     R7,A
09F1 EF                MOV     A,R7
09F2 6455              XRL     A,#055H
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 42  

09F4 702F              JNZ     ?C0138
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
09F6 7BFF              MOV     R3,#0FFH
09F8 7A00        R     MOV     R2,#HIGH ?SC_0
09FA 7900        R     MOV     R1,#LOW ?SC_0
09FC 120000      E     LCALL   _UART_PutString
09FF         ?C0139:
                                           ; SOURCE LINE # 457
09FF 120000      E     LCALL   UART_ReadTxStatus
0A02 EF                MOV     A,R7
0A03 30E1F9            JNB     ACC.1,?C0139
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
0A06         ?C0140:
                                           ; SOURCE LINE # 462
0A06 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 463
0A09 900000      R     MOV     DPTR,#word
0A0C E0                MOVX    A,@DPTR
0A0D FF                MOV     R7,A
0A0E 120000      E     LCALL   _UART_WriteTxData
0A11         ?C0141:
                                           ; SOURCE LINE # 464
0A11 120000      E     LCALL   UART_ReadTxStatus
0A14 EF                MOV     A,R7
0A15 30E1F9            JNB     ACC.1,?C0141
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
0A18         ?C0142:
                                           ; SOURCE LINE # 468
0A18 900000      R     MOV     DPTR,#cmd_exct
0A1B E4                CLR     A
0A1C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0A1D 900000      R     MOV     DPTR,#dat_cnt
0A20 E4                CLR     A
0A21 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0A22 020000      R     LJMP    ?C0168
0A25         ?C0138:
                                           ; SOURCE LINE # 471
0A25 900000      R     MOV     DPTR,#word
0A28 E0                MOVX    A,@DPTR
0A29 FF                MOV     R7,A
0A2A EF                MOV     A,R7
0A2B B40D28            CJNE    A,#0DH,?C0144
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0A2E 900000      R     MOV     DPTR,#cmd_exct
0A31 E4                CLR     A
0A32 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0A33 900000      R     MOV     DPTR,#dat_cnt
0A36 E4                CLR     A
0A37 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
0A38 900000      E     MOV     DPTR,#prnt_en
0A3B 7401              MOV     A,#01H
0A3D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0A3E 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 43  

0A40 7A00        R     MOV     R2,#HIGH ?SC_0
0A42 7900        R     MOV     R1,#LOW ?SC_0
0A44 120000      E     LCALL   _UART_PutString
0A47         ?C0145:
                                           ; SOURCE LINE # 478
0A47 120000      E     LCALL   UART_ReadTxStatus
0A4A EF                MOV     A,R7
0A4B 30E1F9            JNB     ACC.1,?C0145
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 481
0A4E         ?C0146:
                                           ; SOURCE LINE # 483
0A4E 7F01              MOV     R7,#01H
0A50 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 484
0A53 020000      R     LJMP    ?C0168
0A56         ?C0144:
                                           ; SOURCE LINE # 485
0A56 900000      R     MOV     DPTR,#word
0A59 E0                MOVX    A,@DPTR
0A5A FF                MOV     R7,A
0A5B EF                MOV     A,R7
0A5C 64DE              XRL     A,#0DEH
0A5E 706E              JNZ     ?C0148
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
0A60 900000      E     MOV     DPTR,#i
0A63 E4                CLR     A
0A64 F0                MOVX    @DPTR,A
0A65         ?C0149:
0A65 900000      E     MOV     DPTR,#i
0A68 E0                MOVX    A,@DPTR
0A69 FF                MOV     R7,A
0A6A EF                MOV     A,R7
0A6B D3                SETB    C
0A6C 9408              SUBB    A,#08H
0A6E 5019              JNC     ?C0150
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
0A70 900000      E     MOV     DPTR,#i
0A73 E0                MOVX    A,@DPTR
0A74 FF                MOV     R7,A
0A75 7400        R     MOV     A,#LOW rx_word
0A77 2F                ADD     A,R7
0A78 F582              MOV     DPL,A
0A7A E4                CLR     A
0A7B 3400        R     ADDC    A,#HIGH rx_word
0A7D F583              MOV     DPH,A
0A7F E4                CLR     A
0A80 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0A81 900000      E     MOV     DPTR,#i
0A84 E0                MOVX    A,@DPTR
0A85 04                INC     A
0A86 F0                MOVX    @DPTR,A
0A87 80DC              SJMP    ?C0149
0A89         ?C0150:
                                           ; SOURCE LINE # 491
0A89 900000      E     MOV     DPTR,#i
0A8C E4                CLR     A
0A8D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 44  

0A8E 900000      R     MOV     DPTR,#word
0A91 E0                MOVX    A,@DPTR
0A92 FF                MOV     R7,A
0A93 900000      E     MOV     DPTR,#i
0A96 E0                MOVX    A,@DPTR
0A97 FE                MOV     R6,A
0A98 7400        R     MOV     A,#LOW rx_word
0A9A 2E                ADD     A,R6
0A9B F582              MOV     DPL,A
0A9D E4                CLR     A
0A9E 3400        R     ADDC    A,#HIGH rx_word
0AA0 F583              MOV     DPH,A
0AA2 EF                MOV     A,R7
0AA3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0AA4 900000      E     MOV     DPTR,#i
0AA7 E0                MOVX    A,@DPTR
0AA8 04                INC     A
0AA9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0AAA 900000      R     MOV     DPTR,#dat_cnt
0AAD 7402              MOV     A,#02H
0AAF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0AB0 900000      R     MOV     DPTR,#status
0AB3 7403              MOV     A,#03H
0AB5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0AB6 7BFF              MOV     R3,#0FFH
0AB8 7A00        R     MOV     R2,#HIGH ?SC_0
0ABA 7900        R     MOV     R1,#LOW ?SC_0
0ABC 120000      E     LCALL   _UART_PutString
0ABF         ?C0152:
                                           ; SOURCE LINE # 498
0ABF 120000      E     LCALL   UART_ReadTxStatus
0AC2 EF                MOV     A,R7
0AC3 30E103            JNB     ACC.1,$ + 6H
0AC6 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 501
0AC9 80F4              SJMP    ?C0152
0ACB         ?C0153:
                                           ; SOURCE LINE # 502
0ACB 020000      R     LJMP    ?C0168
0ACE         ?C0148:
                                           ; SOURCE LINE # 503
0ACE 900000      R     MOV     DPTR,#word
0AD1 E0                MOVX    A,@DPTR
0AD2 FF                MOV     R7,A
0AD3 EF                MOV     A,R7
0AD4 64DD              XRL     A,#0DDH
0AD6 7052              JNZ     ?C0155
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
0AD8 7BFF              MOV     R3,#0FFH
0ADA 7A00        R     MOV     R2,#HIGH ?SC_0
0ADC 7900        R     MOV     R1,#LOW ?SC_0
0ADE 120000      E     LCALL   _UART_PutString
0AE1         ?C0156:
                                           ; SOURCE LINE # 506
0AE1 120000      E     LCALL   UART_ReadTxStatus
0AE4 EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 45  

0AE5 30E1F9            JNB     ACC.1,?C0156
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 509
0AE8         ?C0157:
                                           ; SOURCE LINE # 511
0AE8 900000      E     MOV     DPTR,#delay
0AEB E0                MOVX    A,@DPTR
0AEC FE                MOV     R6,A
0AED A3                INC     DPTR
0AEE E0                MOVX    A,@DPTR
0AEF FF                MOV     R7,A
0AF0 EE                MOV     A,R6
0AF1 FF                MOV     R7,A
0AF2 7E00              MOV     R6,#00H
0AF4 900000      R     MOV     DPTR,#d_msb
0AF7 EF                MOV     A,R7
0AF8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
0AF9 120000      E     LCALL   UART_ClearTxBuffer
                                           ; SOURCE LINE # 514
0AFC 900000      R     MOV     DPTR,#d_msb
0AFF E0                MOVX    A,@DPTR
0B00 FF                MOV     R7,A
0B01 120000      E     LCALL   _UART_WriteTxData
0B04         ?C0158:
                                           ; SOURCE LINE # 515
0B04 120000      E     LCALL   UART_ReadTxStatus
0B07 EF                MOV     A,R7
0B08 30E1F9            JNB     ACC.1,?C0158
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 518
0B0B         ?C0159:
                                           ; SOURCE LINE # 520
0B0B 900000      E     MOV     DPTR,#delay
0B0E E0                MOVX    A,@DPTR
0B0F FE                MOV     R6,A
0B10 A3                INC     DPTR
0B11 E0                MOVX    A,@DPTR
0B12 FF                MOV     R7,A
0B13 120000      E     LCALL   _UART_WriteTxData
0B16         ?C0160:
                                           ; SOURCE LINE # 521
0B16 120000      E     LCALL   UART_ReadTxStatus
0B19 EF                MOV     A,R7
0B1A 30E1F9            JNB     ACC.1,?C0160
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 524
0B1D         ?C0161:
                                           ; SOURCE LINE # 526
0B1D 900000      R     MOV     DPTR,#cmd_exct
0B20 E4                CLR     A
0B21 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
0B22 900000      R     MOV     DPTR,#dat_cnt
0B25 E4                CLR     A
0B26 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0B27 020000      R     LJMP    ?C0168
0B2A         ?C0155:
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
0B2A 900000      E     MOV     DPTR,#i
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 46  

0B2D E4                CLR     A
0B2E F0                MOVX    @DPTR,A
0B2F         ?C0163:
0B2F 900000      E     MOV     DPTR,#i
0B32 E0                MOVX    A,@DPTR
0B33 FF                MOV     R7,A
0B34 EF                MOV     A,R7
0B35 D3                SETB    C
0B36 941F              SUBB    A,#01FH
0B38 5019              JNC     ?C0164
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
0B3A 900000      E     MOV     DPTR,#i
0B3D E0                MOVX    A,@DPTR
0B3E FF                MOV     R7,A
0B3F 7400        R     MOV     A,#LOW rx_word
0B41 2F                ADD     A,R7
0B42 F582              MOV     DPL,A
0B44 E4                CLR     A
0B45 3400        R     ADDC    A,#HIGH rx_word
0B47 F583              MOV     DPH,A
0B49 E4                CLR     A
0B4A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
0B4B 900000      E     MOV     DPTR,#i
0B4E E0                MOVX    A,@DPTR
0B4F 04                INC     A
0B50 F0                MOVX    @DPTR,A
0B51 80DC              SJMP    ?C0163
0B53         ?C0164:
                                           ; SOURCE LINE # 535
0B53 900000      R     MOV     DPTR,#dat_cnt
0B56 E4                CLR     A
0B57 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
0B58 900000      R     MOV     DPTR,#cmd_exct
0B5B E4                CLR     A
0B5C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
0B5D 7BFF              MOV     R3,#0FFH
0B5F 7A00        R     MOV     R2,#HIGH ?SC_9
0B61 7900        R     MOV     R1,#LOW ?SC_9
0B63 120000      E     LCALL   _UART_PutString
0B66         ?C0166:
                                           ; SOURCE LINE # 539
0B66 120000      E     LCALL   UART_ReadTxStatus
0B69 EF                MOV     A,R7
0B6A 30E103            JNB     ACC.1,$ + 6H
0B6D 020000      R     LJMP    ?C0168
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 542
0B70 80F4              SJMP    ?C0166
0B72         ?C0167:
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0B72 020000      R     LJMP    ?C0168
0B75         ?C0003:
                                           ; SOURCE LINE # 545
0B75 900000      R     MOV     DPTR,#dat_cnt
0B78 E0                MOVX    A,@DPTR
0B79 FF                MOV     R7,A
0B7A EF                MOV     A,R7
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 47  

0B7B 607C              JZ      ?C0168
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
0B7D 900000      R     MOV     DPTR,#word
0B80 E0                MOVX    A,@DPTR
0B81 FF                MOV     R7,A
0B82 900000      E     MOV     DPTR,#i
0B85 E0                MOVX    A,@DPTR
0B86 FE                MOV     R6,A
0B87 7400        R     MOV     A,#LOW rx_word
0B89 2E                ADD     A,R6
0B8A F582              MOV     DPL,A
0B8C E4                CLR     A
0B8D 3400        R     ADDC    A,#HIGH rx_word
0B8F F583              MOV     DPH,A
0B91 EF                MOV     A,R7
0B92 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
0B93 900000      E     MOV     DPTR,#i
0B96 E0                MOVX    A,@DPTR
0B97 04                INC     A
0B98 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
0B99 900000      R     MOV     DPTR,#dat_cnt
0B9C E0                MOVX    A,@DPTR
0B9D 14                DEC     A
0B9E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
0B9F 900000      R     MOV     DPTR,#dat_cnt
0BA2 E0                MOVX    A,@DPTR
0BA3 FF                MOV     R7,A
0BA4 EF                MOV     A,R7
0BA5 704D              JNZ     ?C0170
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
0BA7 900000      R     MOV     DPTR,#cmd_exct
0BAA 7401              MOV     A,#01H
0BAC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0BAD 900000      R     MOV     DPTR,#rx_word
0BB0 E0                MOVX    A,@DPTR
0BB1 FF                MOV     R7,A
0BB2 EF                MOV     A,R7
0BB3 B4DE43            CJNE    A,#0DEH,?C0168
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0BB6 900000      E     MOV     DPTR,#delay
0BB9 E4                CLR     A
0BBA F0                MOVX    @DPTR,A
0BBB A3                INC     DPTR
0BBC E4                CLR     A
0BBD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
0BBE 900000      R     MOV     DPTR,#rx_word+01H
0BC1 E0                MOVX    A,@DPTR
0BC2 FF                MOV     R7,A
0BC3 7E00              MOV     R6,#00H
0BC5 900000      E     MOV     DPTR,#delay
0BC8 EE                MOV     A,R6
0BC9 8FF0              MOV     B,R7
0BCB 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 557
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 48  

0BCE 900000      E     MOV     DPTR,#delay
0BD1 E0                MOVX    A,@DPTR
0BD2 FE                MOV     R6,A
0BD3 A3                INC     DPTR
0BD4 E0                MOVX    A,@DPTR
0BD5 FF                MOV     R7,A
0BD6 EF                MOV     A,R7
0BD7 7F00              MOV     R7,#00H
0BD9 FE                MOV     R6,A
0BDA 900000      E     MOV     DPTR,#delay
0BDD EE                MOV     A,R6
0BDE F0                MOVX    @DPTR,A
0BDF A3                INC     DPTR
0BE0 EF                MOV     A,R7
0BE1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
0BE2 900000      R     MOV     DPTR,#rx_word+02H
0BE5 E0                MOVX    A,@DPTR
0BE6 FF                MOV     R7,A
0BE7 7E00              MOV     R6,#00H
0BE9 900000      E     MOV     DPTR,#delay
0BEC EE                MOV     A,R6
0BED 8FF0              MOV     B,R7
0BEF 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
0BF2 8005              SJMP    ?C0168
0BF4         ?C0170:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
0BF4 900000      R     MOV     DPTR,#cmd_exct
0BF7 E4                CLR     A
0BF8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0BF9         ?C0168:
                                           ; SOURCE LINE # 566
0BF9 900000      R     MOV     DPTR,#cmd_exct
0BFC E0                MOVX    A,@DPTR
0BFD FF                MOV     R7,A
0BFE EF                MOV     A,R7
0BFF 6401              XRL     A,#01H
0C01 6003              JZ      $ + 5H
0C03 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0C06 900000      E     MOV     DPTR,#i
0C09 E0                MOVX    A,@DPTR
0C0A 14                DEC     A
0C0B FF                MOV     R7,A
0C0C F0                MOVX    @DPTR,A
0C0D 900000      R     MOV     DPTR,#lst_byte
0C10 EF                MOV     A,R7
0C11 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
0C12 900000      R     MOV     DPTR,#status
0C15 E0                MOVX    A,@DPTR
0C16 FF                MOV     R7,A
0C17 EF                MOV     A,R7
0C18 14                DEC     A
0C19 FF                MOV     R7,A
0C1A 900000      R     MOV     DPTR,#cmd_set
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 49  

0C1D EF                MOV     A,R7
0C1E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0C1F 900000      R     MOV     DPTR,#status
0C22 E0                MOVX    A,@DPTR
0C23 FF                MOV     R7,A
0C24 900000      R     MOV     DPTR,#stat
0C27 EF                MOV     A,R7
0C28 F0                MOVX    @DPTR,A
0C29         ?C0174:
0C29 900000      R     MOV     DPTR,#stat
0C2C E0                MOVX    A,@DPTR
0C2D FF                MOV     R7,A
0C2E EF                MOV     A,R7
0C2F D3                SETB    C
0C30 9400              SUBB    A,#00H
0C32 4036              JC      ?C0175
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
0C34 900000      R     MOV     DPTR,#lst_byte
0C37 E0                MOVX    A,@DPTR
0C38 FF                MOV     R7,A
0C39 7400        R     MOV     A,#LOW rx_word
0C3B 2F                ADD     A,R7
0C3C F582              MOV     DPL,A
0C3E E4                CLR     A
0C3F 3400        R     ADDC    A,#HIGH rx_word
0C41 F583              MOV     DPH,A
0C43 E0                MOVX    A,@DPTR
0C44 FF                MOV     R7,A
0C45 900000      R     MOV     DPTR,#cmd_set
0C48 E0                MOVX    A,@DPTR
0C49 FE                MOV     R6,A
0C4A 7400        R     MOV     A,#LOW switch_cmd
0C4C 2E                ADD     A,R6
0C4D F582              MOV     DPL,A
0C4F E4                CLR     A
0C50 3400        R     ADDC    A,#HIGH switch_cmd
0C52 F583              MOV     DPH,A
0C54 EF                MOV     A,R7
0C55 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0C56 900000      R     MOV     DPTR,#lst_byte
0C59 E0                MOVX    A,@DPTR
0C5A 14                DEC     A
0C5B F0                MOVX    @DPTR,A
0C5C 900000      R     MOV     DPTR,#cmd_set
0C5F E0                MOVX    A,@DPTR
0C60 14                DEC     A
0C61 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
0C62 900000      R     MOV     DPTR,#stat
0C65 E0                MOVX    A,@DPTR
0C66 14                DEC     A
0C67 F0                MOVX    @DPTR,A
0C68 80BF              SJMP    ?C0174
0C6A         ?C0175:
                                           ; SOURCE LINE # 577
0C6A 900000      R     MOV     DPTR,#cmd_exct
0C6D E4                CLR     A
0C6E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
C51 COMPILER V9.51   TASK2                                                                 07/01/2014 18:08:18 PAGE 50  

0C6F 7F01              MOV     R7,#01H
0C71 120000      E     LCALL   _os_send_signal
                                           ; SOURCE LINE # 579
0C74 900000      E     MOV     DPTR,#i
0C77 E0                MOVX    A,@DPTR
0C78 04                INC     A
0C79 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0C7A 020000      R     LJMP    ?C0001
0C7D 22                RET     
             ; FUNCTION task2 (END)

             ; FUNCTION TASK_2 (BEGIN)
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0000 7F02              MOV     R7,#02H
0002 120000      E     LCALL   _os_create_task
                                           ; SOURCE LINE # 587
0005 22                RET     
             ; FUNCTION TASK_2 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3204    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     44       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
